
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004180  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800428c  0800428c  0000528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004378  08004378  00006088  2**0
                  CONTENTS
  4 .ARM          00000000  08004378  08004378  00006088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004378  08004378  00006088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004378  08004378  00005378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800437c  0800437c  0000537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004380  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000088  08004408  00006088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08004408  00006368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6e7  00000000  00000000  000060b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ad  00000000  00000000  00012798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00014d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8a  00000000  00000000  00015ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f50  00000000  00000000  00016572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012646  00000000  00000000  0002f4c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac57  00000000  00000000  00041b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc75f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cdc  00000000  00000000  000cc7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d0480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08004274 	.word	0x08004274

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08004274 	.word	0x08004274

0800014c <Blinky_led>:
uint8_t manual_led_0 = 0;
uint8_t manual_led_1 = 0;

uint16_t current_value = 0;

void Blinky_led() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status_mode) {
 8000150:	4b28      	ldr	r3, [pc, #160]	@ (80001f4 <Blinky_led+0xa8>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b0d      	cmp	r3, #13
 8000156:	d038      	beq.n	80001ca <Blinky_led+0x7e>
 8000158:	2b0d      	cmp	r3, #13
 800015a:	dc47      	bgt.n	80001ec <Blinky_led+0xa0>
 800015c:	2b0b      	cmp	r3, #11
 800015e:	d002      	beq.n	8000166 <Blinky_led+0x1a>
 8000160:	2b0c      	cmp	r3, #12
 8000162:	d021      	beq.n	80001a8 <Blinky_led+0x5c>
		case SET_GREEN:
			HAL_GPIO_TogglePin(Traffic_Light1[0].Port, Traffic_Light1[0].Pin);
			HAL_GPIO_TogglePin(Traffic_Light2[0].Port, Traffic_Light2[0].Pin);
			break;
		default:
			break;
 8000164:	e042      	b.n	80001ec <Blinky_led+0xa0>
			HAL_GPIO_TogglePin(Traffic_Light1[0].Port, Traffic_Light1[0].Pin);
 8000166:	4b24      	ldr	r3, [pc, #144]	@ (80001f8 <Blinky_led+0xac>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	4a23      	ldr	r2, [pc, #140]	@ (80001f8 <Blinky_led+0xac>)
 800016c:	8892      	ldrh	r2, [r2, #4]
 800016e:	4611      	mov	r1, r2
 8000170:	4618      	mov	r0, r3
 8000172:	f001 ff1c 	bl	8001fae <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_Light1[1].Port, Traffic_Light1[1].Pin);
 8000176:	4b20      	ldr	r3, [pc, #128]	@ (80001f8 <Blinky_led+0xac>)
 8000178:	689b      	ldr	r3, [r3, #8]
 800017a:	4a1f      	ldr	r2, [pc, #124]	@ (80001f8 <Blinky_led+0xac>)
 800017c:	8992      	ldrh	r2, [r2, #12]
 800017e:	4611      	mov	r1, r2
 8000180:	4618      	mov	r0, r3
 8000182:	f001 ff14 	bl	8001fae <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_Light2[0].Port, Traffic_Light2[0].Pin);
 8000186:	4b1d      	ldr	r3, [pc, #116]	@ (80001fc <Blinky_led+0xb0>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4a1c      	ldr	r2, [pc, #112]	@ (80001fc <Blinky_led+0xb0>)
 800018c:	8892      	ldrh	r2, [r2, #4]
 800018e:	4611      	mov	r1, r2
 8000190:	4618      	mov	r0, r3
 8000192:	f001 ff0c 	bl	8001fae <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_Light2[1].Port, Traffic_Light2[1].Pin);
 8000196:	4b19      	ldr	r3, [pc, #100]	@ (80001fc <Blinky_led+0xb0>)
 8000198:	689b      	ldr	r3, [r3, #8]
 800019a:	4a18      	ldr	r2, [pc, #96]	@ (80001fc <Blinky_led+0xb0>)
 800019c:	8992      	ldrh	r2, [r2, #12]
 800019e:	4611      	mov	r1, r2
 80001a0:	4618      	mov	r0, r3
 80001a2:	f001 ff04 	bl	8001fae <HAL_GPIO_TogglePin>
			break;
 80001a6:	e022      	b.n	80001ee <Blinky_led+0xa2>
			HAL_GPIO_TogglePin(Traffic_Light1[1].Port, Traffic_Light1[1].Pin);
 80001a8:	4b13      	ldr	r3, [pc, #76]	@ (80001f8 <Blinky_led+0xac>)
 80001aa:	689b      	ldr	r3, [r3, #8]
 80001ac:	4a12      	ldr	r2, [pc, #72]	@ (80001f8 <Blinky_led+0xac>)
 80001ae:	8992      	ldrh	r2, [r2, #12]
 80001b0:	4611      	mov	r1, r2
 80001b2:	4618      	mov	r0, r3
 80001b4:	f001 fefb 	bl	8001fae <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_Light2[1].Port, Traffic_Light2[1].Pin);
 80001b8:	4b10      	ldr	r3, [pc, #64]	@ (80001fc <Blinky_led+0xb0>)
 80001ba:	689b      	ldr	r3, [r3, #8]
 80001bc:	4a0f      	ldr	r2, [pc, #60]	@ (80001fc <Blinky_led+0xb0>)
 80001be:	8992      	ldrh	r2, [r2, #12]
 80001c0:	4611      	mov	r1, r2
 80001c2:	4618      	mov	r0, r3
 80001c4:	f001 fef3 	bl	8001fae <HAL_GPIO_TogglePin>
			break;
 80001c8:	e011      	b.n	80001ee <Blinky_led+0xa2>
			HAL_GPIO_TogglePin(Traffic_Light1[0].Port, Traffic_Light1[0].Pin);
 80001ca:	4b0b      	ldr	r3, [pc, #44]	@ (80001f8 <Blinky_led+0xac>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4a0a      	ldr	r2, [pc, #40]	@ (80001f8 <Blinky_led+0xac>)
 80001d0:	8892      	ldrh	r2, [r2, #4]
 80001d2:	4611      	mov	r1, r2
 80001d4:	4618      	mov	r0, r3
 80001d6:	f001 feea 	bl	8001fae <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Traffic_Light2[0].Port, Traffic_Light2[0].Pin);
 80001da:	4b08      	ldr	r3, [pc, #32]	@ (80001fc <Blinky_led+0xb0>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a07      	ldr	r2, [pc, #28]	@ (80001fc <Blinky_led+0xb0>)
 80001e0:	8892      	ldrh	r2, [r2, #4]
 80001e2:	4611      	mov	r1, r2
 80001e4:	4618      	mov	r0, r3
 80001e6:	f001 fee2 	bl	8001fae <HAL_GPIO_TogglePin>
			break;
 80001ea:	e000      	b.n	80001ee <Blinky_led+0xa2>
			break;
 80001ec:	bf00      	nop
	}

}
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000028 	.word	0x20000028
 80001f8:	20000008 	.word	0x20000008
 80001fc:	20000018 	.word	0x20000018

08000200 <manual_led>:

void manual_led(int index_0, int index_1){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]

	//manual traffic light 1
	switch (index_0) {
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b02      	cmp	r3, #2
 800020e:	d02b      	beq.n	8000268 <manual_led+0x68>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b02      	cmp	r3, #2
 8000214:	dc39      	bgt.n	800028a <manual_led+0x8a>
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d003      	beq.n	8000224 <manual_led+0x24>
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b01      	cmp	r3, #1
 8000220:	d011      	beq.n	8000246 <manual_led+0x46>
		case 2:
			HAL_GPIO_WritePin(Traffic_Light1[0].Port, Traffic_Light1[0].Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(Traffic_Light1[1].Port, Traffic_Light1[1].Pin, GPIO_PIN_RESET);
			break;
		default:
			break;
 8000222:	e032      	b.n	800028a <manual_led+0x8a>
			HAL_GPIO_WritePin(Traffic_Light1[0].Port, Traffic_Light1[0].Pin, GPIO_PIN_SET);
 8000224:	4b3c      	ldr	r3, [pc, #240]	@ (8000318 <manual_led+0x118>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a3b      	ldr	r2, [pc, #236]	@ (8000318 <manual_led+0x118>)
 800022a:	8891      	ldrh	r1, [r2, #4]
 800022c:	2201      	movs	r2, #1
 800022e:	4618      	mov	r0, r3
 8000230:	f001 fea5 	bl	8001f7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_Light1[1].Port, Traffic_Light1[1].Pin, GPIO_PIN_SET);
 8000234:	4b38      	ldr	r3, [pc, #224]	@ (8000318 <manual_led+0x118>)
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	4a37      	ldr	r2, [pc, #220]	@ (8000318 <manual_led+0x118>)
 800023a:	8991      	ldrh	r1, [r2, #12]
 800023c:	2201      	movs	r2, #1
 800023e:	4618      	mov	r0, r3
 8000240:	f001 fe9d 	bl	8001f7e <HAL_GPIO_WritePin>
			break;
 8000244:	e022      	b.n	800028c <manual_led+0x8c>
			HAL_GPIO_WritePin(Traffic_Light1[0].Port, Traffic_Light1[0].Pin, GPIO_PIN_RESET);
 8000246:	4b34      	ldr	r3, [pc, #208]	@ (8000318 <manual_led+0x118>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a33      	ldr	r2, [pc, #204]	@ (8000318 <manual_led+0x118>)
 800024c:	8891      	ldrh	r1, [r2, #4]
 800024e:	2200      	movs	r2, #0
 8000250:	4618      	mov	r0, r3
 8000252:	f001 fe94 	bl	8001f7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_Light1[1].Port, Traffic_Light1[1].Pin, GPIO_PIN_SET);
 8000256:	4b30      	ldr	r3, [pc, #192]	@ (8000318 <manual_led+0x118>)
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	4a2f      	ldr	r2, [pc, #188]	@ (8000318 <manual_led+0x118>)
 800025c:	8991      	ldrh	r1, [r2, #12]
 800025e:	2201      	movs	r2, #1
 8000260:	4618      	mov	r0, r3
 8000262:	f001 fe8c 	bl	8001f7e <HAL_GPIO_WritePin>
			break;
 8000266:	e011      	b.n	800028c <manual_led+0x8c>
			HAL_GPIO_WritePin(Traffic_Light1[0].Port, Traffic_Light1[0].Pin, GPIO_PIN_SET);
 8000268:	4b2b      	ldr	r3, [pc, #172]	@ (8000318 <manual_led+0x118>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a2a      	ldr	r2, [pc, #168]	@ (8000318 <manual_led+0x118>)
 800026e:	8891      	ldrh	r1, [r2, #4]
 8000270:	2201      	movs	r2, #1
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fe83 	bl	8001f7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_Light1[1].Port, Traffic_Light1[1].Pin, GPIO_PIN_RESET);
 8000278:	4b27      	ldr	r3, [pc, #156]	@ (8000318 <manual_led+0x118>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	4a26      	ldr	r2, [pc, #152]	@ (8000318 <manual_led+0x118>)
 800027e:	8991      	ldrh	r1, [r2, #12]
 8000280:	2200      	movs	r2, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f001 fe7b 	bl	8001f7e <HAL_GPIO_WritePin>
			break;
 8000288:	e000      	b.n	800028c <manual_led+0x8c>
			break;
 800028a:	bf00      	nop
	}

	//manual traffic light 2
	switch (index_1) {
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	2b02      	cmp	r3, #2
 8000290:	d02b      	beq.n	80002ea <manual_led+0xea>
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	2b02      	cmp	r3, #2
 8000296:	dc39      	bgt.n	800030c <manual_led+0x10c>
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d003      	beq.n	80002a6 <manual_led+0xa6>
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d011      	beq.n	80002c8 <manual_led+0xc8>
		case 2:
			HAL_GPIO_WritePin(Traffic_Light2[0].Port, Traffic_Light2[0].Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(Traffic_Light2[1].Port, Traffic_Light2[1].Pin, GPIO_PIN_RESET);
			break;
		default:
			break;
 80002a4:	e032      	b.n	800030c <manual_led+0x10c>
			HAL_GPIO_WritePin(Traffic_Light2[0].Port, Traffic_Light2[0].Pin, GPIO_PIN_SET);
 80002a6:	4b1d      	ldr	r3, [pc, #116]	@ (800031c <manual_led+0x11c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a1c      	ldr	r2, [pc, #112]	@ (800031c <manual_led+0x11c>)
 80002ac:	8891      	ldrh	r1, [r2, #4]
 80002ae:	2201      	movs	r2, #1
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fe64 	bl	8001f7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_Light2[1].Port, Traffic_Light2[1].Pin, GPIO_PIN_SET);
 80002b6:	4b19      	ldr	r3, [pc, #100]	@ (800031c <manual_led+0x11c>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	4a18      	ldr	r2, [pc, #96]	@ (800031c <manual_led+0x11c>)
 80002bc:	8991      	ldrh	r1, [r2, #12]
 80002be:	2201      	movs	r2, #1
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fe5c 	bl	8001f7e <HAL_GPIO_WritePin>
			break;
 80002c6:	e022      	b.n	800030e <manual_led+0x10e>
			HAL_GPIO_WritePin(Traffic_Light2[0].Port, Traffic_Light2[0].Pin, GPIO_PIN_RESET);
 80002c8:	4b14      	ldr	r3, [pc, #80]	@ (800031c <manual_led+0x11c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a13      	ldr	r2, [pc, #76]	@ (800031c <manual_led+0x11c>)
 80002ce:	8891      	ldrh	r1, [r2, #4]
 80002d0:	2200      	movs	r2, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 fe53 	bl	8001f7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_Light2[1].Port, Traffic_Light2[1].Pin, GPIO_PIN_SET);
 80002d8:	4b10      	ldr	r3, [pc, #64]	@ (800031c <manual_led+0x11c>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	4a0f      	ldr	r2, [pc, #60]	@ (800031c <manual_led+0x11c>)
 80002de:	8991      	ldrh	r1, [r2, #12]
 80002e0:	2201      	movs	r2, #1
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 fe4b 	bl	8001f7e <HAL_GPIO_WritePin>
			break;
 80002e8:	e011      	b.n	800030e <manual_led+0x10e>
			HAL_GPIO_WritePin(Traffic_Light2[0].Port, Traffic_Light2[0].Pin, GPIO_PIN_SET);
 80002ea:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <manual_led+0x11c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a0b      	ldr	r2, [pc, #44]	@ (800031c <manual_led+0x11c>)
 80002f0:	8891      	ldrh	r1, [r2, #4]
 80002f2:	2201      	movs	r2, #1
 80002f4:	4618      	mov	r0, r3
 80002f6:	f001 fe42 	bl	8001f7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic_Light2[1].Port, Traffic_Light2[1].Pin, GPIO_PIN_RESET);
 80002fa:	4b08      	ldr	r3, [pc, #32]	@ (800031c <manual_led+0x11c>)
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	4a07      	ldr	r2, [pc, #28]	@ (800031c <manual_led+0x11c>)
 8000300:	8991      	ldrh	r1, [r2, #12]
 8000302:	2200      	movs	r2, #0
 8000304:	4618      	mov	r0, r3
 8000306:	f001 fe3a 	bl	8001f7e <HAL_GPIO_WritePin>
			break;
 800030a:	e000      	b.n	800030e <manual_led+0x10e>
			break;
 800030c:	bf00      	nop
	}
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000008 	.word	0x20000008
 800031c:	20000018 	.word	0x20000018

08000320 <FMS_mode_run>:
void FMS_mode_run() {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0

	switch(status_mode) {
 8000324:	4b8b      	ldr	r3, [pc, #556]	@ (8000554 <FMS_mode_run+0x234>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	3b0a      	subs	r3, #10
 800032a:	2b04      	cmp	r3, #4
 800032c:	f200 816d 	bhi.w	800060a <FMS_mode_run+0x2ea>
 8000330:	a201      	add	r2, pc, #4	@ (adr r2, 8000338 <FMS_mode_run+0x18>)
 8000332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000336:	bf00      	nop
 8000338:	0800034d 	.word	0x0800034d
 800033c:	0800040b 	.word	0x0800040b
 8000340:	080004c1 	.word	0x080004c1
 8000344:	08000579 	.word	0x08000579
 8000348:	0800037f 	.word	0x0800037f
		case NORMAL:

			isButtonPressed(1);
 800034c:	2001      	movs	r0, #1
 800034e:	f000 f9b3 	bl	80006b8 <isButtonPressed>
			isButtonLongPressed(1);
 8000352:	2001      	movs	r0, #1
 8000354:	f000 f9ca 	bl	80006ec <isButtonLongPressed>
			isButtonPressed(2);
 8000358:	2002      	movs	r0, #2
 800035a:	f000 f9ad 	bl	80006b8 <isButtonPressed>
			isButtonLongPressed(2);
 800035e:	2002      	movs	r0, #2
 8000360:	f000 f9c4 	bl	80006ec <isButtonLongPressed>

			if(isButtonPressed(0)) {
 8000364:	2000      	movs	r0, #0
 8000366:	f000 f9a7 	bl	80006b8 <isButtonPressed>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	f000 814e 	beq.w	800060e <FMS_mode_run+0x2ee>
				turn_off_traffic_light();
 8000372:	f001 f961 	bl	8001638 <turn_off_traffic_light>

				status_mode = MANUAL;
 8000376:	4b77      	ldr	r3, [pc, #476]	@ (8000554 <FMS_mode_run+0x234>)
 8000378:	220e      	movs	r2, #14
 800037a:	701a      	strb	r2, [r3, #0]
			}

			break;
 800037c:	e147      	b.n	800060e <FMS_mode_run+0x2ee>
//		case MANUAL:

		case MANUAL:
			isButtonPressed(2);
 800037e:	2002      	movs	r0, #2
 8000380:	f000 f99a 	bl	80006b8 <isButtonPressed>
			isButtonLongPressed(2);
 8000384:	2002      	movs	r0, #2
 8000386:	f000 f9b1 	bl	80006ec <isButtonLongPressed>
			if(isButtonPressed(1)){
 800038a:	2001      	movs	r0, #1
 800038c:	f000 f994 	bl	80006b8 <isButtonPressed>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d00c      	beq.n	80003b0 <FMS_mode_run+0x90>
				manual_led_0++;
 8000396:	4b70      	ldr	r3, [pc, #448]	@ (8000558 <FMS_mode_run+0x238>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	3301      	adds	r3, #1
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4b6e      	ldr	r3, [pc, #440]	@ (8000558 <FMS_mode_run+0x238>)
 80003a0:	701a      	strb	r2, [r3, #0]
				if(manual_led_0>2) manual_led_0 = 0;
 80003a2:	4b6d      	ldr	r3, [pc, #436]	@ (8000558 <FMS_mode_run+0x238>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d902      	bls.n	80003b0 <FMS_mode_run+0x90>
 80003aa:	4b6b      	ldr	r3, [pc, #428]	@ (8000558 <FMS_mode_run+0x238>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonLongPressed(1)){
 80003b0:	2001      	movs	r0, #1
 80003b2:	f000 f99b 	bl	80006ec <isButtonLongPressed>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d00c      	beq.n	80003d6 <FMS_mode_run+0xb6>
				manual_led_1++;
 80003bc:	4b67      	ldr	r3, [pc, #412]	@ (800055c <FMS_mode_run+0x23c>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <FMS_mode_run+0x23c>)
 80003c6:	701a      	strb	r2, [r3, #0]
				if(manual_led_1>2) manual_led_1 = 0;
 80003c8:	4b64      	ldr	r3, [pc, #400]	@ (800055c <FMS_mode_run+0x23c>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b02      	cmp	r3, #2
 80003ce:	d902      	bls.n	80003d6 <FMS_mode_run+0xb6>
 80003d0:	4b62      	ldr	r3, [pc, #392]	@ (800055c <FMS_mode_run+0x23c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
			}

			manual_led(manual_led_0, manual_led_1);
 80003d6:	4b60      	ldr	r3, [pc, #384]	@ (8000558 <FMS_mode_run+0x238>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	461a      	mov	r2, r3
 80003dc:	4b5f      	ldr	r3, [pc, #380]	@ (800055c <FMS_mode_run+0x23c>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	4619      	mov	r1, r3
 80003e2:	4610      	mov	r0, r2
 80003e4:	f7ff ff0c 	bl	8000200 <manual_led>

			if(isButtonPressed(0)) {
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f965 	bl	80006b8 <isButtonPressed>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	f000 810e 	beq.w	8000612 <FMS_mode_run+0x2f2>
				turn_off_traffic_light();
 80003f6:	f001 f91f 	bl	8001638 <turn_off_traffic_light>
				current_value = time_of_color[red];
 80003fa:	4b59      	ldr	r3, [pc, #356]	@ (8000560 <FMS_mode_run+0x240>)
 80003fc:	881a      	ldrh	r2, [r3, #0]
 80003fe:	4b59      	ldr	r3, [pc, #356]	@ (8000564 <FMS_mode_run+0x244>)
 8000400:	801a      	strh	r2, [r3, #0]
				status_mode = SET_RED;
 8000402:	4b54      	ldr	r3, [pc, #336]	@ (8000554 <FMS_mode_run+0x234>)
 8000404:	220b      	movs	r2, #11
 8000406:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000408:	e103      	b.n	8000612 <FMS_mode_run+0x2f2>

		case SET_RED:

			if(isButtonPressed(1))
 800040a:	2001      	movs	r0, #1
 800040c:	f000 f954 	bl	80006b8 <isButtonPressed>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d005      	beq.n	8000422 <FMS_mode_run+0x102>
				current_value++;
 8000416:	4b53      	ldr	r3, [pc, #332]	@ (8000564 <FMS_mode_run+0x244>)
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	3301      	adds	r3, #1
 800041c:	b29a      	uxth	r2, r3
 800041e:	4b51      	ldr	r3, [pc, #324]	@ (8000564 <FMS_mode_run+0x244>)
 8000420:	801a      	strh	r2, [r3, #0]
			if(isButtonLongPressed(1))
 8000422:	2001      	movs	r0, #1
 8000424:	f000 f962 	bl	80006ec <isButtonLongPressed>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d005      	beq.n	800043a <FMS_mode_run+0x11a>
				current_value--;
 800042e:	4b4d      	ldr	r3, [pc, #308]	@ (8000564 <FMS_mode_run+0x244>)
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	3b01      	subs	r3, #1
 8000434:	b29a      	uxth	r2, r3
 8000436:	4b4b      	ldr	r3, [pc, #300]	@ (8000564 <FMS_mode_run+0x244>)
 8000438:	801a      	strh	r2, [r3, #0]

			if(isButtonPressed(2))
 800043a:	2002      	movs	r0, #2
 800043c:	f000 f93c 	bl	80006b8 <isButtonPressed>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d005      	beq.n	8000452 <FMS_mode_run+0x132>
				set_time_value(red, current_value);
 8000446:	4b47      	ldr	r3, [pc, #284]	@ (8000564 <FMS_mode_run+0x244>)
 8000448:	881b      	ldrh	r3, [r3, #0]
 800044a:	4619      	mov	r1, r3
 800044c:	2000      	movs	r0, #0
 800044e:	f001 f8db 	bl	8001608 <set_time_value>

			count_road1 = current_value;
 8000452:	4b44      	ldr	r3, [pc, #272]	@ (8000564 <FMS_mode_run+0x244>)
 8000454:	881a      	ldrh	r2, [r3, #0]
 8000456:	4b44      	ldr	r3, [pc, #272]	@ (8000568 <FMS_mode_run+0x248>)
 8000458:	801a      	strh	r2, [r3, #0]
			count_road2 = current_value;
 800045a:	4b42      	ldr	r3, [pc, #264]	@ (8000564 <FMS_mode_run+0x244>)
 800045c:	881a      	ldrh	r2, [r3, #0]
 800045e:	4b43      	ldr	r3, [pc, #268]	@ (800056c <FMS_mode_run+0x24c>)
 8000460:	801a      	strh	r2, [r3, #0]

			if(isButtonPressed(0)) {
 8000462:	2000      	movs	r0, #0
 8000464:	f000 f928 	bl	80006b8 <isButtonPressed>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	f000 80d3 	beq.w	8000616 <FMS_mode_run+0x2f6>
				HAL_GPIO_WritePin(Traffic_Light1[0].Port, Traffic_Light1[0].Pin, GPIO_PIN_RESET);
 8000470:	4b3f      	ldr	r3, [pc, #252]	@ (8000570 <FMS_mode_run+0x250>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a3e      	ldr	r2, [pc, #248]	@ (8000570 <FMS_mode_run+0x250>)
 8000476:	8891      	ldrh	r1, [r2, #4]
 8000478:	2200      	movs	r2, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f001 fd7f 	bl	8001f7e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Traffic_Light1[1].Port, Traffic_Light1[1].Pin, GPIO_PIN_RESET);
 8000480:	4b3b      	ldr	r3, [pc, #236]	@ (8000570 <FMS_mode_run+0x250>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	4a3a      	ldr	r2, [pc, #232]	@ (8000570 <FMS_mode_run+0x250>)
 8000486:	8991      	ldrh	r1, [r2, #12]
 8000488:	2200      	movs	r2, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f001 fd77 	bl	8001f7e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(Traffic_Light2[0].Port, Traffic_Light2[0].Pin, GPIO_PIN_RESET);
 8000490:	4b38      	ldr	r3, [pc, #224]	@ (8000574 <FMS_mode_run+0x254>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a37      	ldr	r2, [pc, #220]	@ (8000574 <FMS_mode_run+0x254>)
 8000496:	8891      	ldrh	r1, [r2, #4]
 8000498:	2200      	movs	r2, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f001 fd6f 	bl	8001f7e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Traffic_Light2[1].Port, Traffic_Light2[1].Pin, GPIO_PIN_RESET);
 80004a0:	4b34      	ldr	r3, [pc, #208]	@ (8000574 <FMS_mode_run+0x254>)
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	4a33      	ldr	r2, [pc, #204]	@ (8000574 <FMS_mode_run+0x254>)
 80004a6:	8991      	ldrh	r1, [r2, #12]
 80004a8:	2200      	movs	r2, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f001 fd67 	bl	8001f7e <HAL_GPIO_WritePin>

				current_value = time_of_color[yellow];
 80004b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000560 <FMS_mode_run+0x240>)
 80004b2:	885a      	ldrh	r2, [r3, #2]
 80004b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000564 <FMS_mode_run+0x244>)
 80004b6:	801a      	strh	r2, [r3, #0]
				status_mode = SET_YELLOW;
 80004b8:	4b26      	ldr	r3, [pc, #152]	@ (8000554 <FMS_mode_run+0x234>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80004be:	e0aa      	b.n	8000616 <FMS_mode_run+0x2f6>

		case SET_YELLOW:

			if(isButtonPressed(1))
 80004c0:	2001      	movs	r0, #1
 80004c2:	f000 f8f9 	bl	80006b8 <isButtonPressed>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d005      	beq.n	80004d8 <FMS_mode_run+0x1b8>
				current_value++;
 80004cc:	4b25      	ldr	r3, [pc, #148]	@ (8000564 <FMS_mode_run+0x244>)
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	3301      	adds	r3, #1
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	4b23      	ldr	r3, [pc, #140]	@ (8000564 <FMS_mode_run+0x244>)
 80004d6:	801a      	strh	r2, [r3, #0]
			if(isButtonLongPressed(1))
 80004d8:	2001      	movs	r0, #1
 80004da:	f000 f907 	bl	80006ec <isButtonLongPressed>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d005      	beq.n	80004f0 <FMS_mode_run+0x1d0>
				current_value--;
 80004e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000564 <FMS_mode_run+0x244>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	3b01      	subs	r3, #1
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000564 <FMS_mode_run+0x244>)
 80004ee:	801a      	strh	r2, [r3, #0]

			if(isButtonPressed(2))
 80004f0:	2002      	movs	r0, #2
 80004f2:	f000 f8e1 	bl	80006b8 <isButtonPressed>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d005      	beq.n	8000508 <FMS_mode_run+0x1e8>
				set_time_value(yellow, current_value);
 80004fc:	4b19      	ldr	r3, [pc, #100]	@ (8000564 <FMS_mode_run+0x244>)
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	4619      	mov	r1, r3
 8000502:	2001      	movs	r0, #1
 8000504:	f001 f880 	bl	8001608 <set_time_value>

			count_road1 = current_value;
 8000508:	4b16      	ldr	r3, [pc, #88]	@ (8000564 <FMS_mode_run+0x244>)
 800050a:	881a      	ldrh	r2, [r3, #0]
 800050c:	4b16      	ldr	r3, [pc, #88]	@ (8000568 <FMS_mode_run+0x248>)
 800050e:	801a      	strh	r2, [r3, #0]
			count_road2 = current_value;
 8000510:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <FMS_mode_run+0x244>)
 8000512:	881a      	ldrh	r2, [r3, #0]
 8000514:	4b15      	ldr	r3, [pc, #84]	@ (800056c <FMS_mode_run+0x24c>)
 8000516:	801a      	strh	r2, [r3, #0]


			if(isButtonPressed(0)) {
 8000518:	2000      	movs	r0, #0
 800051a:	f000 f8cd 	bl	80006b8 <isButtonPressed>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d07a      	beq.n	800061a <FMS_mode_run+0x2fa>
				HAL_GPIO_WritePin(Traffic_Light1[1].Port, Traffic_Light1[1].Pin, GPIO_PIN_RESET);
 8000524:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <FMS_mode_run+0x250>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	4a11      	ldr	r2, [pc, #68]	@ (8000570 <FMS_mode_run+0x250>)
 800052a:	8991      	ldrh	r1, [r2, #12]
 800052c:	2200      	movs	r2, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f001 fd25 	bl	8001f7e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Traffic_Light2[1].Port, Traffic_Light2[1].Pin, GPIO_PIN_RESET);
 8000534:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <FMS_mode_run+0x254>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	4a0e      	ldr	r2, [pc, #56]	@ (8000574 <FMS_mode_run+0x254>)
 800053a:	8991      	ldrh	r1, [r2, #12]
 800053c:	2200      	movs	r2, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fd1d 	bl	8001f7e <HAL_GPIO_WritePin>

				current_value = time_of_color[green];
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <FMS_mode_run+0x240>)
 8000546:	889a      	ldrh	r2, [r3, #4]
 8000548:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <FMS_mode_run+0x244>)
 800054a:	801a      	strh	r2, [r3, #0]
				status_mode = SET_GREEN;
 800054c:	4b01      	ldr	r3, [pc, #4]	@ (8000554 <FMS_mode_run+0x234>)
 800054e:	220d      	movs	r2, #13
 8000550:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000552:	e062      	b.n	800061a <FMS_mode_run+0x2fa>
 8000554:	20000028 	.word	0x20000028
 8000558:	200000a4 	.word	0x200000a4
 800055c:	200000a5 	.word	0x200000a5
 8000560:	20000000 	.word	0x20000000
 8000564:	200000a6 	.word	0x200000a6
 8000568:	200000d8 	.word	0x200000d8
 800056c:	200000da 	.word	0x200000da
 8000570:	20000008 	.word	0x20000008
 8000574:	20000018 	.word	0x20000018

		case SET_GREEN:

			if(isButtonPressed(1))
 8000578:	2001      	movs	r0, #1
 800057a:	f000 f89d 	bl	80006b8 <isButtonPressed>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d005      	beq.n	8000590 <FMS_mode_run+0x270>
				current_value++;
 8000584:	4b27      	ldr	r3, [pc, #156]	@ (8000624 <FMS_mode_run+0x304>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	b29a      	uxth	r2, r3
 800058c:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <FMS_mode_run+0x304>)
 800058e:	801a      	strh	r2, [r3, #0]
			if(isButtonLongPressed(1))
 8000590:	2001      	movs	r0, #1
 8000592:	f000 f8ab 	bl	80006ec <isButtonLongPressed>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d005      	beq.n	80005a8 <FMS_mode_run+0x288>
				current_value--;
 800059c:	4b21      	ldr	r3, [pc, #132]	@ (8000624 <FMS_mode_run+0x304>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <FMS_mode_run+0x304>)
 80005a6:	801a      	strh	r2, [r3, #0]

			if(isButtonPressed(2))
 80005a8:	2002      	movs	r0, #2
 80005aa:	f000 f885 	bl	80006b8 <isButtonPressed>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d005      	beq.n	80005c0 <FMS_mode_run+0x2a0>
				set_time_value(green, current_value);
 80005b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <FMS_mode_run+0x304>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	2002      	movs	r0, #2
 80005bc:	f001 f824 	bl	8001608 <set_time_value>

			count_road1 = current_value;
 80005c0:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <FMS_mode_run+0x304>)
 80005c2:	881a      	ldrh	r2, [r3, #0]
 80005c4:	4b18      	ldr	r3, [pc, #96]	@ (8000628 <FMS_mode_run+0x308>)
 80005c6:	801a      	strh	r2, [r3, #0]
			count_road2 = current_value;
 80005c8:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <FMS_mode_run+0x304>)
 80005ca:	881a      	ldrh	r2, [r3, #0]
 80005cc:	4b17      	ldr	r3, [pc, #92]	@ (800062c <FMS_mode_run+0x30c>)
 80005ce:	801a      	strh	r2, [r3, #0]

			if(isButtonPressed(0)) {
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 f871 	bl	80006b8 <isButtonPressed>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d020      	beq.n	800061e <FMS_mode_run+0x2fe>
				HAL_GPIO_WritePin(Traffic_Light1[0].Port, Traffic_Light1[0].Pin, GPIO_PIN_RESET);
 80005dc:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <FMS_mode_run+0x310>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a13      	ldr	r2, [pc, #76]	@ (8000630 <FMS_mode_run+0x310>)
 80005e2:	8891      	ldrh	r1, [r2, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fcc9 	bl	8001f7e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Traffic_Light2[0].Port, Traffic_Light2[0].Pin, GPIO_PIN_RESET);
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <FMS_mode_run+0x314>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a10      	ldr	r2, [pc, #64]	@ (8000634 <FMS_mode_run+0x314>)
 80005f2:	8891      	ldrh	r1, [r2, #4]
 80005f4:	2200      	movs	r2, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fcc1 	bl	8001f7e <HAL_GPIO_WritePin>

				status_mode = NORMAL;
 80005fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <FMS_mode_run+0x318>)
 80005fe:	220a      	movs	r2, #10
 8000600:	701a      	strb	r2, [r3, #0]
				status_traffic_light = INIT;
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <FMS_mode_run+0x31c>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000608:	e009      	b.n	800061e <FMS_mode_run+0x2fe>

		default:
			break;
 800060a:	bf00      	nop
 800060c:	e008      	b.n	8000620 <FMS_mode_run+0x300>
			break;
 800060e:	bf00      	nop
 8000610:	e006      	b.n	8000620 <FMS_mode_run+0x300>
			break;
 8000612:	bf00      	nop
 8000614:	e004      	b.n	8000620 <FMS_mode_run+0x300>
			break;
 8000616:	bf00      	nop
 8000618:	e002      	b.n	8000620 <FMS_mode_run+0x300>
			break;
 800061a:	bf00      	nop
 800061c:	e000      	b.n	8000620 <FMS_mode_run+0x300>
			break;
 800061e:	bf00      	nop
	}

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000a6 	.word	0x200000a6
 8000628:	200000d8 	.word	0x200000d8
 800062c:	200000da 	.word	0x200000da
 8000630:	20000008 	.word	0x20000008
 8000634:	20000018 	.word	0x20000018
 8000638:	20000028 	.word	0x20000028
 800063c:	200000d6 	.word	0x200000d6

08000640 <init_gpi_button>:
        }
        TimeOutForKeyPress[i] = TIME_OUT;
    }
}

void init_gpi_button(int i) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
    switch (i) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b02      	cmp	r3, #2
 800064c:	d020      	beq.n	8000690 <init_gpi_button+0x50>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b02      	cmp	r3, #2
 8000652:	dc28      	bgt.n	80006a6 <init_gpi_button+0x66>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d003      	beq.n	8000662 <init_gpi_button+0x22>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d00b      	beq.n	8000678 <init_gpi_button+0x38>
            break;
        case 2:
            KeyReg[i][0] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
            break;
        default:
            break;
 8000660:	e021      	b.n	80006a6 <init_gpi_button+0x66>
            KeyReg[i][0] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000662:	2110      	movs	r1, #16
 8000664:	4812      	ldr	r0, [pc, #72]	@ (80006b0 <init_gpi_button+0x70>)
 8000666:	f001 fc73 	bl	8001f50 <HAL_GPIO_ReadPin>
 800066a:	4603      	mov	r3, r0
 800066c:	4619      	mov	r1, r3
 800066e:	4a11      	ldr	r2, [pc, #68]	@ (80006b4 <init_gpi_button+0x74>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            break;
 8000676:	e017      	b.n	80006a8 <init_gpi_button+0x68>
            KeyReg[i][0] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000678:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800067c:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <init_gpi_button+0x70>)
 800067e:	f001 fc67 	bl	8001f50 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	4619      	mov	r1, r3
 8000686:	4a0b      	ldr	r2, [pc, #44]	@ (80006b4 <init_gpi_button+0x74>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            break;
 800068e:	e00b      	b.n	80006a8 <init_gpi_button+0x68>
            KeyReg[i][0] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000690:	2140      	movs	r1, #64	@ 0x40
 8000692:	4807      	ldr	r0, [pc, #28]	@ (80006b0 <init_gpi_button+0x70>)
 8000694:	f001 fc5c 	bl	8001f50 <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	4619      	mov	r1, r3
 800069c:	4a05      	ldr	r2, [pc, #20]	@ (80006b4 <init_gpi_button+0x74>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            break;
 80006a4:	e000      	b.n	80006a8 <init_gpi_button+0x68>
            break;
 80006a6:	bf00      	nop
    }
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40010c00 	.word	0x40010c00
 80006b4:	200000a8 	.word	0x200000a8

080006b8 <isButtonPressed>:
int isButtonPressed(int number){
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	if(button_flag[number] == 1){
 80006c0:	4a09      	ldr	r2, [pc, #36]	@ (80006e8 <isButtonPressed+0x30>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d106      	bne.n	80006da <isButtonPressed+0x22>
		button_flag[number] = 0;
 80006cc:	4a06      	ldr	r2, [pc, #24]	@ (80006e8 <isButtonPressed+0x30>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2100      	movs	r1, #0
 80006d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e000      	b.n	80006dc <isButtonPressed+0x24>
	}
	return 0;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	200000d0 	.word	0x200000d0

080006ec <isButtonLongPressed>:

int isButtonLongPressed(int number){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	if(button_long_pressed[number] == 1){
 80006f4:	4a09      	ldr	r2, [pc, #36]	@ (800071c <isButtonLongPressed+0x30>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d106      	bne.n	800070e <isButtonLongPressed+0x22>
		button_long_pressed[number] = 0;
 8000700:	4a06      	ldr	r2, [pc, #24]	@ (800071c <isButtonLongPressed+0x30>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2100      	movs	r1, #0
 8000706:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return 1;
 800070a:	2301      	movs	r3, #1
 800070c:	e000      	b.n	8000710 <isButtonLongPressed+0x24>
	}
	return 0;
 800070e:	2300      	movs	r3, #0
}
 8000710:	4618      	mov	r0, r3
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	200000c8 	.word	0x200000c8

08000720 <getKeyInput>:

void getKeyInput() {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_BUTTON; i++) {
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	e017      	b.n	800075c <getKeyInput+0x3c>
        KeyReg[i][2] = KeyReg[i][1];
 800072c:	4a48      	ldr	r2, [pc, #288]	@ (8000850 <getKeyInput+0x130>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	4413      	add	r3, r2
 8000734:	8859      	ldrh	r1, [r3, #2]
 8000736:	4a46      	ldr	r2, [pc, #280]	@ (8000850 <getKeyInput+0x130>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	4413      	add	r3, r2
 800073e:	460a      	mov	r2, r1
 8000740:	809a      	strh	r2, [r3, #4]
        KeyReg[i][1] = KeyReg[i][0];
 8000742:	4a43      	ldr	r2, [pc, #268]	@ (8000850 <getKeyInput+0x130>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f832 1033 	ldrh.w	r1, [r2, r3, lsl #3]
 800074a:	4a41      	ldr	r2, [pc, #260]	@ (8000850 <getKeyInput+0x130>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	4413      	add	r3, r2
 8000752:	460a      	mov	r2, r1
 8000754:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < MAX_BUTTON; i++) {
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3301      	adds	r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b02      	cmp	r3, #2
 8000760:	dde4      	ble.n	800072c <getKeyInput+0xc>
    }

    for (int i = 0; i < MAX_BUTTON; i++) {
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	e06b      	b.n	8000840 <getKeyInput+0x120>
        init_gpi_button(i);
 8000768:	6838      	ldr	r0, [r7, #0]
 800076a:	f7ff ff69 	bl	8000640 <init_gpi_button>

        if ((KeyReg[i][1] == KeyReg[i][0]) && (KeyReg[i][2] == KeyReg[i][1])) {
 800076e:	4a38      	ldr	r2, [pc, #224]	@ (8000850 <getKeyInput+0x130>)
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	4413      	add	r3, r2
 8000776:	885a      	ldrh	r2, [r3, #2]
 8000778:	4935      	ldr	r1, [pc, #212]	@ (8000850 <getKeyInput+0x130>)
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8000780:	429a      	cmp	r2, r3
 8000782:	d15a      	bne.n	800083a <getKeyInput+0x11a>
 8000784:	4a32      	ldr	r2, [pc, #200]	@ (8000850 <getKeyInput+0x130>)
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	4413      	add	r3, r2
 800078c:	889a      	ldrh	r2, [r3, #4]
 800078e:	4930      	ldr	r1, [pc, #192]	@ (8000850 <getKeyInput+0x130>)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	440b      	add	r3, r1
 8000796:	885b      	ldrh	r3, [r3, #2]
 8000798:	429a      	cmp	r2, r3
 800079a:	d14e      	bne.n	800083a <getKeyInput+0x11a>

        	if (KeyReg[i][2] != KeyReg[i][3]) {
 800079c:	4a2c      	ldr	r2, [pc, #176]	@ (8000850 <getKeyInput+0x130>)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	4413      	add	r3, r2
 80007a4:	889a      	ldrh	r2, [r3, #4]
 80007a6:	492a      	ldr	r1, [pc, #168]	@ (8000850 <getKeyInput+0x130>)
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	440b      	add	r3, r1
 80007ae:	88db      	ldrh	r3, [r3, #6]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d01c      	beq.n	80007ee <getKeyInput+0xce>
                KeyReg[i][3] = KeyReg[i][2];
 80007b4:	4a26      	ldr	r2, [pc, #152]	@ (8000850 <getKeyInput+0x130>)
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	4413      	add	r3, r2
 80007bc:	8899      	ldrh	r1, [r3, #4]
 80007be:	4a24      	ldr	r2, [pc, #144]	@ (8000850 <getKeyInput+0x130>)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	4413      	add	r3, r2
 80007c6:	460a      	mov	r2, r1
 80007c8:	80da      	strh	r2, [r3, #6]

                if (KeyReg[i][3] == PRESSED_STATE) {
 80007ca:	4a21      	ldr	r2, [pc, #132]	@ (8000850 <getKeyInput+0x130>)
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	4413      	add	r3, r2
 80007d2:	88db      	ldrh	r3, [r3, #6]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d130      	bne.n	800083a <getKeyInput+0x11a>
                    TimeOutForKeyPress[i] = TIME_OUT;
 80007d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000854 <getKeyInput+0x134>)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	2132      	movs	r1, #50	@ 0x32
 80007de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    button_flag[i] = 1;
 80007e2:	4a1d      	ldr	r2, [pc, #116]	@ (8000858 <getKeyInput+0x138>)
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	2101      	movs	r1, #1
 80007e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007ec:	e025      	b.n	800083a <getKeyInput+0x11a>
                }
            }
            else {
                TimeOutForKeyPress[i]--;
 80007ee:	4a19      	ldr	r2, [pc, #100]	@ (8000854 <getKeyInput+0x134>)
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	b299      	uxth	r1, r3
 80007fa:	4a16      	ldr	r2, [pc, #88]	@ (8000854 <getKeyInput+0x134>)
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

                if (TimeOutForKeyPress[i] == 0) {
 8000802:	4a14      	ldr	r2, [pc, #80]	@ (8000854 <getKeyInput+0x134>)
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d115      	bne.n	800083a <getKeyInput+0x11a>
                    TimeOutForKeyPress[i] = TIME_OUT;
 800080e:	4a11      	ldr	r2, [pc, #68]	@ (8000854 <getKeyInput+0x134>)
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	2132      	movs	r1, #50	@ 0x32
 8000814:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

                    if (KeyReg[i][3] == PRESSED_STATE){
 8000818:	4a0d      	ldr	r2, [pc, #52]	@ (8000850 <getKeyInput+0x130>)
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	4413      	add	r3, r2
 8000820:	88db      	ldrh	r3, [r3, #6]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d109      	bne.n	800083a <getKeyInput+0x11a>
                    	button_flag[i] = 0;
 8000826:	4a0c      	ldr	r2, [pc, #48]	@ (8000858 <getKeyInput+0x138>)
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	2100      	movs	r1, #0
 800082c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                        button_long_pressed[i] = 1;
 8000830:	4a0a      	ldr	r2, [pc, #40]	@ (800085c <getKeyInput+0x13c>)
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	2101      	movs	r1, #1
 8000836:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < MAX_BUTTON; i++) {
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	2b02      	cmp	r3, #2
 8000844:	dd90      	ble.n	8000768 <getKeyInput+0x48>
                }
            }
        }
    }

}
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000a8 	.word	0x200000a8
 8000854:	200000c0 	.word	0x200000c0
 8000858:	200000d0 	.word	0x200000d0
 800085c:	200000c8 	.word	0x200000c8

08000860 <displayLCD>:

uint16_t count_road1 = 0;
uint16_t count_road2 = 0;
uint16_t mode = 0;
char ouput1[50], ouput2[50];
void displayLCD() {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

	if(is_flag_set(2)){
 8000866:	2002      	movs	r0, #2
 8000868:	f000 fd48 	bl	80012fc <is_flag_set>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	f000 816f 	beq.w	8000b52 <displayLCD+0x2f2>
		//lcd_clear_display();
		setTimer(2, 40);
 8000874:	2128      	movs	r1, #40	@ 0x28
 8000876:	2002      	movs	r0, #2
 8000878:	f000 fd50 	bl	800131c <setTimer>


		for(int i = 0; i < 50; i++) {
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	e00c      	b.n	800089c <displayLCD+0x3c>
				ouput1[i] = 0;
 8000882:	4ab5      	ldr	r2, [pc, #724]	@ (8000b58 <displayLCD+0x2f8>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4413      	add	r3, r2
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
				ouput2[i] = 0;
 800088c:	4ab3      	ldr	r2, [pc, #716]	@ (8000b5c <displayLCD+0x2fc>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 50; i++) {
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3301      	adds	r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b31      	cmp	r3, #49	@ 0x31
 80008a0:	ddef      	ble.n	8000882 <displayLCD+0x22>
			}

		if(status_mode == MANUAL) {
 80008a2:	4baf      	ldr	r3, [pc, #700]	@ (8000b60 <displayLCD+0x300>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b0e      	cmp	r3, #14
 80008a8:	d11c      	bne.n	80008e4 <displayLCD+0x84>

			lcd_goto_XY(1,0);
 80008aa:	2100      	movs	r1, #0
 80008ac:	2001      	movs	r0, #1
 80008ae:	f000 fa20 	bl	8000cf2 <lcd_goto_XY>
			lcd_send_string("  MANUAL   ");
 80008b2:	48ac      	ldr	r0, [pc, #688]	@ (8000b64 <displayLCD+0x304>)
 80008b4:	f000 fa08 	bl	8000cc8 <lcd_send_string>
			lcd_goto_XY(0,0);
 80008b8:	2100      	movs	r1, #0
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 fa19 	bl	8000cf2 <lcd_goto_XY>
			lcd_send_string(" Customers ");
 80008c0:	48a9      	ldr	r0, [pc, #676]	@ (8000b68 <displayLCD+0x308>)
 80008c2:	f000 fa01 	bl	8000cc8 <lcd_send_string>
			lcd_goto_XY(1, 11);
 80008c6:	210b      	movs	r1, #11
 80008c8:	2001      	movs	r0, #1
 80008ca:	f000 fa12 	bl	8000cf2 <lcd_goto_XY>
			lcd_send_string("Mode");
 80008ce:	48a7      	ldr	r0, [pc, #668]	@ (8000b6c <displayLCD+0x30c>)
 80008d0:	f000 f9fa 	bl	8000cc8 <lcd_send_string>
			lcd_goto_XY(0, 12);
 80008d4:	210c      	movs	r1, #12
 80008d6:	2000      	movs	r0, #0
 80008d8:	f000 fa0b 	bl	8000cf2 <lcd_goto_XY>
			lcd_send_string("1");
 80008dc:	48a4      	ldr	r0, [pc, #656]	@ (8000b70 <displayLCD+0x310>)
 80008de:	f000 f9f3 	bl	8000cc8 <lcd_send_string>
			return;
 80008e2:	e136      	b.n	8000b52 <displayLCD+0x2f2>
		}
		if(status_mode == SET_RED) {
 80008e4:	4b9e      	ldr	r3, [pc, #632]	@ (8000b60 <displayLCD+0x300>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b0b      	cmp	r3, #11
 80008ea:	d123      	bne.n	8000934 <displayLCD+0xd4>
			lcd_goto_XY(0, 0);
 80008ec:	2100      	movs	r1, #0
 80008ee:	2000      	movs	r0, #0
 80008f0:	f000 f9ff 	bl	8000cf2 <lcd_goto_XY>
			sprintf(ouput1, "t: %ds       ", count_road1);
 80008f4:	4b9f      	ldr	r3, [pc, #636]	@ (8000b74 <displayLCD+0x314>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	499f      	ldr	r1, [pc, #636]	@ (8000b78 <displayLCD+0x318>)
 80008fc:	4896      	ldr	r0, [pc, #600]	@ (8000b58 <displayLCD+0x2f8>)
 80008fe:	f003 f8b7 	bl	8003a70 <siprintf>
			lcd_send_string(ouput1);
 8000902:	4895      	ldr	r0, [pc, #596]	@ (8000b58 <displayLCD+0x2f8>)
 8000904:	f000 f9e0 	bl	8000cc8 <lcd_send_string>

			lcd_goto_XY(1, 11);
 8000908:	210b      	movs	r1, #11
 800090a:	2001      	movs	r0, #1
 800090c:	f000 f9f1 	bl	8000cf2 <lcd_goto_XY>
			lcd_send_string("Mode");
 8000910:	4896      	ldr	r0, [pc, #600]	@ (8000b6c <displayLCD+0x30c>)
 8000912:	f000 f9d9 	bl	8000cc8 <lcd_send_string>
			lcd_goto_XY(0, 12);
 8000916:	210c      	movs	r1, #12
 8000918:	2000      	movs	r0, #0
 800091a:	f000 f9ea 	bl	8000cf2 <lcd_goto_XY>
			lcd_send_string("2");
 800091e:	4897      	ldr	r0, [pc, #604]	@ (8000b7c <displayLCD+0x31c>)
 8000920:	f000 f9d2 	bl	8000cc8 <lcd_send_string>

			lcd_goto_XY(1, 0);
 8000924:	2100      	movs	r1, #0
 8000926:	2001      	movs	r0, #1
 8000928:	f000 f9e3 	bl	8000cf2 <lcd_goto_XY>
//			sprintf(ouput2, "%d             ", count_road2);
			lcd_send_string("RED       ");
 800092c:	4894      	ldr	r0, [pc, #592]	@ (8000b80 <displayLCD+0x320>)
 800092e:	f000 f9cb 	bl	8000cc8 <lcd_send_string>

			return;
 8000932:	e10e      	b.n	8000b52 <displayLCD+0x2f2>
		}

		if(status_mode == SET_YELLOW) {
 8000934:	4b8a      	ldr	r3, [pc, #552]	@ (8000b60 <displayLCD+0x300>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b0c      	cmp	r3, #12
 800093a:	d123      	bne.n	8000984 <displayLCD+0x124>

			lcd_goto_XY(0,0);
 800093c:	2100      	movs	r1, #0
 800093e:	2000      	movs	r0, #0
 8000940:	f000 f9d7 	bl	8000cf2 <lcd_goto_XY>
			sprintf(ouput1, "t: %ds       ", count_road1);
 8000944:	4b8b      	ldr	r3, [pc, #556]	@ (8000b74 <displayLCD+0x314>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	498b      	ldr	r1, [pc, #556]	@ (8000b78 <displayLCD+0x318>)
 800094c:	4882      	ldr	r0, [pc, #520]	@ (8000b58 <displayLCD+0x2f8>)
 800094e:	f003 f88f 	bl	8003a70 <siprintf>
			lcd_send_string(ouput1);
 8000952:	4881      	ldr	r0, [pc, #516]	@ (8000b58 <displayLCD+0x2f8>)
 8000954:	f000 f9b8 	bl	8000cc8 <lcd_send_string>

			lcd_goto_XY(1, 11);
 8000958:	210b      	movs	r1, #11
 800095a:	2001      	movs	r0, #1
 800095c:	f000 f9c9 	bl	8000cf2 <lcd_goto_XY>
			lcd_send_string("Mode");
 8000960:	4882      	ldr	r0, [pc, #520]	@ (8000b6c <displayLCD+0x30c>)
 8000962:	f000 f9b1 	bl	8000cc8 <lcd_send_string>
			lcd_goto_XY(0, 12);
 8000966:	210c      	movs	r1, #12
 8000968:	2000      	movs	r0, #0
 800096a:	f000 f9c2 	bl	8000cf2 <lcd_goto_XY>
			lcd_send_string("3");
 800096e:	4885      	ldr	r0, [pc, #532]	@ (8000b84 <displayLCD+0x324>)
 8000970:	f000 f9aa 	bl	8000cc8 <lcd_send_string>

			lcd_goto_XY(1, 0);
 8000974:	2100      	movs	r1, #0
 8000976:	2001      	movs	r0, #1
 8000978:	f000 f9bb 	bl	8000cf2 <lcd_goto_XY>

			lcd_send_string("YELLOW   ");
 800097c:	4882      	ldr	r0, [pc, #520]	@ (8000b88 <displayLCD+0x328>)
 800097e:	f000 f9a3 	bl	8000cc8 <lcd_send_string>

			return;
 8000982:	e0e6      	b.n	8000b52 <displayLCD+0x2f2>
		}

		if(status_mode == SET_GREEN) {
 8000984:	4b76      	ldr	r3, [pc, #472]	@ (8000b60 <displayLCD+0x300>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b0d      	cmp	r3, #13
 800098a:	d123      	bne.n	80009d4 <displayLCD+0x174>

			lcd_goto_XY(0, 0);
 800098c:	2100      	movs	r1, #0
 800098e:	2000      	movs	r0, #0
 8000990:	f000 f9af 	bl	8000cf2 <lcd_goto_XY>
			sprintf(ouput1, "t: %ds       ", count_road1);
 8000994:	4b77      	ldr	r3, [pc, #476]	@ (8000b74 <displayLCD+0x314>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	4977      	ldr	r1, [pc, #476]	@ (8000b78 <displayLCD+0x318>)
 800099c:	486e      	ldr	r0, [pc, #440]	@ (8000b58 <displayLCD+0x2f8>)
 800099e:	f003 f867 	bl	8003a70 <siprintf>
			lcd_send_string(ouput1);
 80009a2:	486d      	ldr	r0, [pc, #436]	@ (8000b58 <displayLCD+0x2f8>)
 80009a4:	f000 f990 	bl	8000cc8 <lcd_send_string>

			lcd_goto_XY(1, 11);
 80009a8:	210b      	movs	r1, #11
 80009aa:	2001      	movs	r0, #1
 80009ac:	f000 f9a1 	bl	8000cf2 <lcd_goto_XY>
			lcd_send_string("Mode");
 80009b0:	486e      	ldr	r0, [pc, #440]	@ (8000b6c <displayLCD+0x30c>)
 80009b2:	f000 f989 	bl	8000cc8 <lcd_send_string>
			lcd_goto_XY(0, 12);
 80009b6:	210c      	movs	r1, #12
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 f99a 	bl	8000cf2 <lcd_goto_XY>
			lcd_send_string("4");
 80009be:	4873      	ldr	r0, [pc, #460]	@ (8000b8c <displayLCD+0x32c>)
 80009c0:	f000 f982 	bl	8000cc8 <lcd_send_string>

			lcd_goto_XY(1, 0);
 80009c4:	2100      	movs	r1, #0
 80009c6:	2001      	movs	r0, #1
 80009c8:	f000 f993 	bl	8000cf2 <lcd_goto_XY>
			lcd_send_string("GREEN    ");
 80009cc:	4870      	ldr	r0, [pc, #448]	@ (8000b90 <displayLCD+0x330>)
 80009ce:	f000 f97b 	bl	8000cc8 <lcd_send_string>

			return;
 80009d2:	e0be      	b.n	8000b52 <displayLCD+0x2f2>
		}

		switch(status_traffic_light) {
 80009d4:	4b6f      	ldr	r3, [pc, #444]	@ (8000b94 <displayLCD+0x334>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	3b02      	subs	r3, #2
 80009da:	2b03      	cmp	r3, #3
 80009dc:	f200 80b8 	bhi.w	8000b50 <displayLCD+0x2f0>
 80009e0:	a201      	add	r2, pc, #4	@ (adr r2, 80009e8 <displayLCD+0x188>)
 80009e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e6:	bf00      	nop
 80009e8:	080009f9 	.word	0x080009f9
 80009ec:	08000a4f 	.word	0x08000a4f
 80009f0:	08000aa5 	.word	0x08000aa5
 80009f4:	08000afb 	.word	0x08000afb
			case green_red:
				lcd_goto_XY(0, 0);
 80009f8:	2100      	movs	r1, #0
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 f979 	bl	8000cf2 <lcd_goto_XY>
				sprintf(ouput1, "GREEN:  %d ", count_road1);
 8000a00:	4b5c      	ldr	r3, [pc, #368]	@ (8000b74 <displayLCD+0x314>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4964      	ldr	r1, [pc, #400]	@ (8000b98 <displayLCD+0x338>)
 8000a08:	4853      	ldr	r0, [pc, #332]	@ (8000b58 <displayLCD+0x2f8>)
 8000a0a:	f003 f831 	bl	8003a70 <siprintf>
				lcd_send_string(ouput1);
 8000a0e:	4852      	ldr	r0, [pc, #328]	@ (8000b58 <displayLCD+0x2f8>)
 8000a10:	f000 f95a 	bl	8000cc8 <lcd_send_string>

				lcd_goto_XY(1, 0);
 8000a14:	2100      	movs	r1, #0
 8000a16:	2001      	movs	r0, #1
 8000a18:	f000 f96b 	bl	8000cf2 <lcd_goto_XY>
				sprintf(ouput2, "RED:    %d ", count_road2);
 8000a1c:	4b5f      	ldr	r3, [pc, #380]	@ (8000b9c <displayLCD+0x33c>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	495f      	ldr	r1, [pc, #380]	@ (8000ba0 <displayLCD+0x340>)
 8000a24:	484d      	ldr	r0, [pc, #308]	@ (8000b5c <displayLCD+0x2fc>)
 8000a26:	f003 f823 	bl	8003a70 <siprintf>
				lcd_send_string(ouput2);
 8000a2a:	484c      	ldr	r0, [pc, #304]	@ (8000b5c <displayLCD+0x2fc>)
 8000a2c:	f000 f94c 	bl	8000cc8 <lcd_send_string>

				lcd_goto_XY(1, 11);
 8000a30:	210b      	movs	r1, #11
 8000a32:	2001      	movs	r0, #1
 8000a34:	f000 f95d 	bl	8000cf2 <lcd_goto_XY>
				lcd_send_string("Mode");
 8000a38:	484c      	ldr	r0, [pc, #304]	@ (8000b6c <displayLCD+0x30c>)
 8000a3a:	f000 f945 	bl	8000cc8 <lcd_send_string>
				lcd_goto_XY(0, 12);
 8000a3e:	210c      	movs	r1, #12
 8000a40:	2000      	movs	r0, #0
 8000a42:	f000 f956 	bl	8000cf2 <lcd_goto_XY>
				lcd_send_string("0");
 8000a46:	4857      	ldr	r0, [pc, #348]	@ (8000ba4 <displayLCD+0x344>)
 8000a48:	f000 f93e 	bl	8000cc8 <lcd_send_string>

				break;
 8000a4c:	e081      	b.n	8000b52 <displayLCD+0x2f2>

			case yellow_red:

				lcd_goto_XY(0, 0);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 f94e 	bl	8000cf2 <lcd_goto_XY>
				sprintf(ouput1, "YELLOW: %d ", count_road1);
 8000a56:	4b47      	ldr	r3, [pc, #284]	@ (8000b74 <displayLCD+0x314>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4952      	ldr	r1, [pc, #328]	@ (8000ba8 <displayLCD+0x348>)
 8000a5e:	483e      	ldr	r0, [pc, #248]	@ (8000b58 <displayLCD+0x2f8>)
 8000a60:	f003 f806 	bl	8003a70 <siprintf>
				lcd_send_string(ouput1);
 8000a64:	483c      	ldr	r0, [pc, #240]	@ (8000b58 <displayLCD+0x2f8>)
 8000a66:	f000 f92f 	bl	8000cc8 <lcd_send_string>

				lcd_goto_XY(1, 0);
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f000 f940 	bl	8000cf2 <lcd_goto_XY>
				sprintf(ouput2, "RED:    %d ", count_road2);
 8000a72:	4b4a      	ldr	r3, [pc, #296]	@ (8000b9c <displayLCD+0x33c>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4949      	ldr	r1, [pc, #292]	@ (8000ba0 <displayLCD+0x340>)
 8000a7a:	4838      	ldr	r0, [pc, #224]	@ (8000b5c <displayLCD+0x2fc>)
 8000a7c:	f002 fff8 	bl	8003a70 <siprintf>
				lcd_send_string(ouput2);
 8000a80:	4836      	ldr	r0, [pc, #216]	@ (8000b5c <displayLCD+0x2fc>)
 8000a82:	f000 f921 	bl	8000cc8 <lcd_send_string>

				lcd_goto_XY(1, 11);
 8000a86:	210b      	movs	r1, #11
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f000 f932 	bl	8000cf2 <lcd_goto_XY>
				lcd_send_string("Mode");
 8000a8e:	4837      	ldr	r0, [pc, #220]	@ (8000b6c <displayLCD+0x30c>)
 8000a90:	f000 f91a 	bl	8000cc8 <lcd_send_string>
				lcd_goto_XY(0, 12);
 8000a94:	210c      	movs	r1, #12
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f92b 	bl	8000cf2 <lcd_goto_XY>
				lcd_send_string("0");
 8000a9c:	4841      	ldr	r0, [pc, #260]	@ (8000ba4 <displayLCD+0x344>)
 8000a9e:	f000 f913 	bl	8000cc8 <lcd_send_string>
				break;
 8000aa2:	e056      	b.n	8000b52 <displayLCD+0x2f2>

			case red_green:

				lcd_goto_XY(0, 0);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f923 	bl	8000cf2 <lcd_goto_XY>
				sprintf(ouput1, "RED:    %d ", count_road1);
 8000aac:	4b31      	ldr	r3, [pc, #196]	@ (8000b74 <displayLCD+0x314>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	493b      	ldr	r1, [pc, #236]	@ (8000ba0 <displayLCD+0x340>)
 8000ab4:	4828      	ldr	r0, [pc, #160]	@ (8000b58 <displayLCD+0x2f8>)
 8000ab6:	f002 ffdb 	bl	8003a70 <siprintf>
				lcd_send_string(ouput1);
 8000aba:	4827      	ldr	r0, [pc, #156]	@ (8000b58 <displayLCD+0x2f8>)
 8000abc:	f000 f904 	bl	8000cc8 <lcd_send_string>

				lcd_goto_XY(1, 0);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f000 f915 	bl	8000cf2 <lcd_goto_XY>
				sprintf(ouput2, "GREEN:  %d ", count_road2);
 8000ac8:	4b34      	ldr	r3, [pc, #208]	@ (8000b9c <displayLCD+0x33c>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4932      	ldr	r1, [pc, #200]	@ (8000b98 <displayLCD+0x338>)
 8000ad0:	4822      	ldr	r0, [pc, #136]	@ (8000b5c <displayLCD+0x2fc>)
 8000ad2:	f002 ffcd 	bl	8003a70 <siprintf>
				lcd_send_string(ouput2);
 8000ad6:	4821      	ldr	r0, [pc, #132]	@ (8000b5c <displayLCD+0x2fc>)
 8000ad8:	f000 f8f6 	bl	8000cc8 <lcd_send_string>

				lcd_goto_XY(1, 11);
 8000adc:	210b      	movs	r1, #11
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f000 f907 	bl	8000cf2 <lcd_goto_XY>
				lcd_send_string("Mode");
 8000ae4:	4821      	ldr	r0, [pc, #132]	@ (8000b6c <displayLCD+0x30c>)
 8000ae6:	f000 f8ef 	bl	8000cc8 <lcd_send_string>
				lcd_goto_XY(0, 12);
 8000aea:	210c      	movs	r1, #12
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 f900 	bl	8000cf2 <lcd_goto_XY>
				lcd_send_string("0");
 8000af2:	482c      	ldr	r0, [pc, #176]	@ (8000ba4 <displayLCD+0x344>)
 8000af4:	f000 f8e8 	bl	8000cc8 <lcd_send_string>
				break;
 8000af8:	e02b      	b.n	8000b52 <displayLCD+0x2f2>

			case red_yellow:
				lcd_goto_XY(0, 0);
 8000afa:	2100      	movs	r1, #0
 8000afc:	2000      	movs	r0, #0
 8000afe:	f000 f8f8 	bl	8000cf2 <lcd_goto_XY>
				sprintf(ouput1, "RED:    %d ", count_road1);
 8000b02:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <displayLCD+0x314>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	4925      	ldr	r1, [pc, #148]	@ (8000ba0 <displayLCD+0x340>)
 8000b0a:	4813      	ldr	r0, [pc, #76]	@ (8000b58 <displayLCD+0x2f8>)
 8000b0c:	f002 ffb0 	bl	8003a70 <siprintf>
				lcd_send_string(ouput1);
 8000b10:	4811      	ldr	r0, [pc, #68]	@ (8000b58 <displayLCD+0x2f8>)
 8000b12:	f000 f8d9 	bl	8000cc8 <lcd_send_string>

				lcd_goto_XY(1, 0);
 8000b16:	2100      	movs	r1, #0
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f000 f8ea 	bl	8000cf2 <lcd_goto_XY>
				sprintf(ouput2, "YELLOW: %d ", count_road2);
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <displayLCD+0x33c>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	4920      	ldr	r1, [pc, #128]	@ (8000ba8 <displayLCD+0x348>)
 8000b26:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <displayLCD+0x2fc>)
 8000b28:	f002 ffa2 	bl	8003a70 <siprintf>
				lcd_send_string(ouput2);
 8000b2c:	480b      	ldr	r0, [pc, #44]	@ (8000b5c <displayLCD+0x2fc>)
 8000b2e:	f000 f8cb 	bl	8000cc8 <lcd_send_string>

				lcd_goto_XY(1, 11);
 8000b32:	210b      	movs	r1, #11
 8000b34:	2001      	movs	r0, #1
 8000b36:	f000 f8dc 	bl	8000cf2 <lcd_goto_XY>
				lcd_send_string("Mode");
 8000b3a:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <displayLCD+0x30c>)
 8000b3c:	f000 f8c4 	bl	8000cc8 <lcd_send_string>
				lcd_goto_XY(0, 12);
 8000b40:	210c      	movs	r1, #12
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 f8d5 	bl	8000cf2 <lcd_goto_XY>
				lcd_send_string("0");
 8000b48:	4816      	ldr	r0, [pc, #88]	@ (8000ba4 <displayLCD+0x344>)
 8000b4a:	f000 f8bd 	bl	8000cc8 <lcd_send_string>
				break;
 8000b4e:	e000      	b.n	8000b52 <displayLCD+0x2f2>

			default:
				break;
 8000b50:	bf00      	nop





}
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200000dc 	.word	0x200000dc
 8000b5c:	20000110 	.word	0x20000110
 8000b60:	20000028 	.word	0x20000028
 8000b64:	0800428c 	.word	0x0800428c
 8000b68:	08004298 	.word	0x08004298
 8000b6c:	080042a4 	.word	0x080042a4
 8000b70:	080042ac 	.word	0x080042ac
 8000b74:	200000d8 	.word	0x200000d8
 8000b78:	080042b0 	.word	0x080042b0
 8000b7c:	080042c0 	.word	0x080042c0
 8000b80:	080042c4 	.word	0x080042c4
 8000b84:	080042d0 	.word	0x080042d0
 8000b88:	080042d4 	.word	0x080042d4
 8000b8c:	080042e0 	.word	0x080042e0
 8000b90:	080042e4 	.word	0x080042e4
 8000b94:	200000d6 	.word	0x200000d6
 8000b98:	080042f0 	.word	0x080042f0
 8000b9c:	200000da 	.word	0x200000da
 8000ba0:	080042fc 	.word	0x080042fc
 8000ba4:	08004308 	.word	0x08004308
 8000ba8:	0800430c 	.word	0x0800430c

08000bac <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af02      	add	r7, sp, #8
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f023 030f 	bic.w	r3, r3, #15
 8000bbc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	011b      	lsls	r3, r3, #4
 8000bc2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	f043 030c 	orr.w	r3, r3, #12
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000bd8:	7bbb      	ldrb	r3, [r7, #14]
 8000bda:	f043 030c 	orr.w	r3, r3, #12
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000be2:	7bbb      	ldrb	r3, [r7, #14]
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bec:	f107 0208 	add.w	r2, r7, #8
 8000bf0:	2364      	movs	r3, #100	@ 0x64
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	2142      	movs	r1, #66	@ 0x42
 8000bf8:	4803      	ldr	r0, [pc, #12]	@ (8000c08 <lcd_send_cmd+0x5c>)
 8000bfa:	f001 fb35 	bl	8002268 <HAL_I2C_Master_Transmit>
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000144 	.word	0x20000144

08000c0c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af02      	add	r7, sp, #8
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f023 030f 	bic.w	r3, r3, #15
 8000c1c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	011b      	lsls	r3, r3, #4
 8000c22:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	f043 030d 	orr.w	r3, r3, #13
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	f043 0309 	orr.w	r3, r3, #9
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000c38:	7bbb      	ldrb	r3, [r7, #14]
 8000c3a:	f043 030d 	orr.w	r3, r3, #13
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000c42:	7bbb      	ldrb	r3, [r7, #14]
 8000c44:	f043 0309 	orr.w	r3, r3, #9
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c4c:	f107 0208 	add.w	r2, r7, #8
 8000c50:	2364      	movs	r3, #100	@ 0x64
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	2304      	movs	r3, #4
 8000c56:	2142      	movs	r1, #66	@ 0x42
 8000c58:	4803      	ldr	r0, [pc, #12]	@ (8000c68 <lcd_send_data+0x5c>)
 8000c5a:	f001 fb05 	bl	8002268 <HAL_I2C_Master_Transmit>
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000144 	.word	0x20000144

08000c6c <lcd_init>:

void lcd_init (void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000c70:	2033      	movs	r0, #51	@ 0x33
 8000c72:	f7ff ff9b 	bl	8000bac <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000c76:	2032      	movs	r0, #50	@ 0x32
 8000c78:	f7ff ff98 	bl	8000bac <lcd_send_cmd>
	HAL_Delay(50);
 8000c7c:	2032      	movs	r0, #50	@ 0x32
 8000c7e:	f000 feb1 	bl	80019e4 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000c82:	2028      	movs	r0, #40	@ 0x28
 8000c84:	f7ff ff92 	bl	8000bac <lcd_send_cmd>
	HAL_Delay(50);
 8000c88:	2032      	movs	r0, #50	@ 0x32
 8000c8a:	f000 feab 	bl	80019e4 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f7ff ff8c 	bl	8000bac <lcd_send_cmd>
	HAL_Delay(50);
 8000c94:	2032      	movs	r0, #50	@ 0x32
 8000c96:	f000 fea5 	bl	80019e4 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000c9a:	2006      	movs	r0, #6
 8000c9c:	f7ff ff86 	bl	8000bac <lcd_send_cmd>
	HAL_Delay(50);
 8000ca0:	2032      	movs	r0, #50	@ 0x32
 8000ca2:	f000 fe9f 	bl	80019e4 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000ca6:	200c      	movs	r0, #12
 8000ca8:	f7ff ff80 	bl	8000bac <lcd_send_cmd>
	HAL_Delay(50);
 8000cac:	2032      	movs	r0, #50	@ 0x32
 8000cae:	f000 fe99 	bl	80019e4 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000cb2:	2002      	movs	r0, #2
 8000cb4:	f7ff ff7a 	bl	8000bac <lcd_send_cmd>
	HAL_Delay(50);
 8000cb8:	2032      	movs	r0, #50	@ 0x32
 8000cba:	f000 fe93 	bl	80019e4 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000cbe:	2080      	movs	r0, #128	@ 0x80
 8000cc0:	f7ff ff74 	bl	8000bac <lcd_send_cmd>
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000cd0:	e006      	b.n	8000ce0 <lcd_send_string+0x18>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	1c5a      	adds	r2, r3, #1
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff96 	bl	8000c0c <lcd_send_data>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f4      	bne.n	8000cd2 <lcd_send_string+0xa>
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <lcd_goto_XY>:
	HAL_Delay(50);
}


void lcd_goto_XY (int row, int col)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d108      	bne.n	8000d14 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	4413      	add	r3, r2
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	337f      	adds	r3, #127	@ 0x7f
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	e008      	b.n	8000d26 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	3340      	adds	r3, #64	@ 0x40
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff3f 	bl	8000bac <lcd_send_cmd>
}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3c:	f000 fdf0 	bl	8001920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d40:	f000 f822 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d44:	f000 f8d6 	bl	8000ef4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d48:	f000 f888 	bl	8000e5c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000d4c:	f000 f858 	bl	8000e00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  timer_init();
 8000d50:	f000 fac6 	bl	80012e0 <timer_init>
  lcd_init();
 8000d54:	f7ff ff8a 	bl	8000c6c <lcd_init>
  sche_init();
 8000d58:	f000 f950 	bl	8000ffc <sche_init>

  sche_add_task(Blinky_led, 0, 50);
 8000d5c:	2232      	movs	r2, #50	@ 0x32
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4807      	ldr	r0, [pc, #28]	@ (8000d80 <main+0x48>)
 8000d62:	f000 f96b 	bl	800103c <sche_add_task>
  sche_add_task(TrafficLight_run, 0, 100);
 8000d66:	2264      	movs	r2, #100	@ 0x64
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4806      	ldr	r0, [pc, #24]	@ (8000d84 <main+0x4c>)
 8000d6c:	f000 f966 	bl	800103c <sche_add_task>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FMS_mode_run();
 8000d70:	f7ff fad6 	bl	8000320 <FMS_mode_run>
	  sche_dispatcher();
 8000d74:	f000 fa44 	bl	8001200 <sche_dispatcher>
	  displayLCD();
 8000d78:	f7ff fd72 	bl	8000860 <displayLCD>
	  FMS_mode_run();
 8000d7c:	bf00      	nop
 8000d7e:	e7f7      	b.n	8000d70 <main+0x38>
 8000d80:	0800014d 	.word	0x0800014d
 8000d84:	08001735 	.word	0x08001735

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b090      	sub	sp, #64	@ 0x40
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0318 	add.w	r3, r7, #24
 8000d92:	2228      	movs	r2, #40	@ 0x28
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 fe8a 	bl	8003ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dae:	2301      	movs	r3, #1
 8000db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db2:	2310      	movs	r3, #16
 8000db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dba:	f107 0318 	add.w	r3, r7, #24
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 fdaa 	bl	8002918 <HAL_RCC_OscConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dca:	f000 f8f5 	bl	8000fb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dce:	230f      	movs	r3, #15
 8000dd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 f818 	bl	8002e1c <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000df2:	f000 f8e1 	bl	8000fb8 <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	3740      	adds	r7, #64	@ 0x40
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e06:	4a13      	ldr	r2, [pc, #76]	@ (8000e54 <MX_I2C1_Init+0x54>)
 8000e08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e0c:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <MX_I2C1_Init+0x58>)
 8000e0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e2a:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e3c:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e3e:	f001 f8cf 	bl	8001fe0 <HAL_I2C_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e48:	f000 f8b6 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000144 	.word	0x20000144
 8000e54:	40005400 	.word	0x40005400
 8000e58:	000186a0 	.word	0x000186a0

08000e5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef0 <MX_TIM2_Init+0x94>)
 8000e7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <MX_TIM2_Init+0x94>)
 8000e82:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000e86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <MX_TIM2_Init+0x94>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <MX_TIM2_Init+0x94>)
 8000e90:	2209      	movs	r2, #9
 8000e92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e94:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <MX_TIM2_Init+0x94>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <MX_TIM2_Init+0x94>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ea0:	4813      	ldr	r0, [pc, #76]	@ (8000ef0 <MX_TIM2_Init+0x94>)
 8000ea2:	f002 f935 	bl	8003110 <HAL_TIM_Base_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000eac:	f000 f884 	bl	8000fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <MX_TIM2_Init+0x94>)
 8000ebe:	f002 fab9 	bl	8003434 <HAL_TIM_ConfigClockSource>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ec8:	f000 f876 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <MX_TIM2_Init+0x94>)
 8000eda:	f002 fc9b 	bl	8003814 <HAL_TIMEx_MasterConfigSynchronization>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ee4:	f000 f868 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000198 	.word	0x20000198

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <MX_GPIO_Init+0xb8>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a27      	ldr	r2, [pc, #156]	@ (8000fac <MX_GPIO_Init+0xb8>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <MX_GPIO_Init+0xb8>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	4b22      	ldr	r3, [pc, #136]	@ (8000fac <MX_GPIO_Init+0xb8>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a21      	ldr	r2, [pc, #132]	@ (8000fac <MX_GPIO_Init+0xb8>)
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <MX_GPIO_Init+0xb8>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|Light11_Pin|Light12_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000f3e:	481c      	ldr	r0, [pc, #112]	@ (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f40:	f001 f81d 	bl	8001f7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Light21_Pin|Light22_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2128      	movs	r1, #40	@ 0x28
 8000f48:	481a      	ldr	r0, [pc, #104]	@ (8000fb4 <MX_GPIO_Init+0xc0>)
 8000f4a:	f001 f818 	bl	8001f7e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin Light11_Pin Light12_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|Light11_Pin|Light12_Pin;
 8000f4e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000f52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	4619      	mov	r1, r3
 8000f66:	4812      	ldr	r0, [pc, #72]	@ (8000fb0 <MX_GPIO_Init+0xbc>)
 8000f68:	f000 fe6e 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON1_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON1_Pin|BUTTON3_Pin;
 8000f6c:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 8000f70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f76:	2302      	movs	r3, #2
 8000f78:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <MX_GPIO_Init+0xc0>)
 8000f82:	f000 fe61 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : Light21_Pin Light22_Pin */
  GPIO_InitStruct.Pin = Light21_Pin|Light22_Pin;
 8000f86:	2328      	movs	r3, #40	@ 0x28
 8000f88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2302      	movs	r3, #2
 8000f94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <MX_GPIO_Init+0xc0>)
 8000f9e:	f000 fe53 	bl	8001c48 <HAL_GPIO_Init>

}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010800 	.word	0x40010800
 8000fb4:	40010c00 	.word	0x40010c00

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <Error_Handler+0x8>

08000fc4 <create_new_node>:

#include "scheduler.h"

ListTasks* list_tasks = NULL;

TaskNode* create_new_node(void (*pfunc)(), uint32_t delay, uint32_t period) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
	TaskNode *newNode = (struct TaskNode*)malloc(sizeof(TaskNode));
 8000fd0:	2014      	movs	r0, #20
 8000fd2:	f002 fc8f 	bl	80038f4 <malloc>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	617b      	str	r3, [r7, #20]
	newNode->delay = delay;
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	609a      	str	r2, [r3, #8]
	newNode->period = period;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	60da      	str	r2, [r3, #12]
	newNode->pTask = pfunc;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	601a      	str	r2, [r3, #0]
	newNode->next = NULL;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
	return newNode;
 8000ff2:	697b      	ldr	r3, [r7, #20]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <sche_init>:

void sche_init() {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

	timer_init();
 8001000:	f000 f96e 	bl	80012e0 <timer_init>

	list_tasks = (struct ListTasks*)malloc(sizeof(ListTasks));
 8001004:	2010      	movs	r0, #16
 8001006:	f002 fc75 	bl	80038f4 <malloc>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <sche_init+0x3c>)
 8001010:	601a      	str	r2, [r3, #0]
	list_tasks->tail = NULL;
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <sche_init+0x3c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
	list_tasks->numTask = 0;
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <sche_init+0x3c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2200      	movs	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
	list_tasks->total_delay = 0;
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <sche_init+0x3c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
	list_tasks->emptyslot = 0;
 800102a:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <sche_init+0x3c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001e0 	.word	0x200001e0

0800103c <sche_add_task>:

uint8_t sche_add_task(void (*pfunc)(void), uint32_t delay, uint32_t period) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]

		TaskNode* newNode;

		if(list_tasks->tail == NULL) {
 8001048:	4b59      	ldr	r3, [pc, #356]	@ (80011b0 <sche_add_task+0x174>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d119      	bne.n	8001086 <sche_add_task+0x4a>
			newNode = create_new_node(pfunc, delay, period);
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f7ff ffb4 	bl	8000fc4 <create_new_node>
 800105c:	6138      	str	r0, [r7, #16]
			list_tasks->tail = newNode;
 800105e:	4b54      	ldr	r3, [pc, #336]	@ (80011b0 <sche_add_task+0x174>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	601a      	str	r2, [r3, #0]
			list_tasks->tail->next = newNode;
 8001066:	4b52      	ldr	r3, [pc, #328]	@ (80011b0 <sche_add_task+0x174>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	611a      	str	r2, [r3, #16]

			list_tasks->total_delay = delay;
 8001070:	4b4f      	ldr	r3, [pc, #316]	@ (80011b0 <sche_add_task+0x174>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	609a      	str	r2, [r3, #8]

			list_tasks->numTask++;
 8001078:	4b4d      	ldr	r3, [pc, #308]	@ (80011b0 <sche_add_task+0x174>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	3201      	adds	r2, #1
 8001080:	605a      	str	r2, [r3, #4]
			return 0;
 8001082:	2300      	movs	r3, #0
 8001084:	e090      	b.n	80011a8 <sche_add_task+0x16c>
		}
		TaskNode* temp = list_tasks->tail->next; //head
 8001086:	4b4a      	ldr	r3, [pc, #296]	@ (80011b0 <sche_add_task+0x174>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	61fb      	str	r3, [r7, #28]
		// Them vao dau hang doi
		if (delay <= temp->delay) {
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	429a      	cmp	r2, r3
 8001098:	d81a      	bhi.n	80010d0 <sche_add_task+0x94>
			newNode = create_new_node(pfunc, delay, period);
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f7ff ff90 	bl	8000fc4 <create_new_node>
 80010a4:	6138      	str	r0, [r7, #16]
			newNode->next = temp;
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	611a      	str	r2, [r3, #16]
			list_tasks->tail->next = newNode;
 80010ac:	4b40      	ldr	r3, [pc, #256]	@ (80011b0 <sche_add_task+0x174>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	611a      	str	r2, [r3, #16]

			temp->delay -= delay;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad2      	subs	r2, r2, r3
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	609a      	str	r2, [r3, #8]

			list_tasks->numTask++;
 80010c2:	4b3b      	ldr	r3, [pc, #236]	@ (80011b0 <sche_add_task+0x174>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	3201      	adds	r2, #1
 80010ca:	605a      	str	r2, [r3, #4]
			return 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e06b      	b.n	80011a8 <sche_add_task+0x16c>
		}
		// Them vao cuoi hang doi
		if (delay >= list_tasks->total_delay) {
 80010d0:	4b37      	ldr	r3, [pc, #220]	@ (80011b0 <sche_add_task+0x174>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d326      	bcc.n	800112a <sche_add_task+0xee>
			newNode = create_new_node(pfunc, delay - list_tasks->total_delay, period);
 80010dc:	4b34      	ldr	r3, [pc, #208]	@ (80011b0 <sche_add_task+0x174>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	4619      	mov	r1, r3
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f7ff ff6a 	bl	8000fc4 <create_new_node>
 80010f0:	6138      	str	r0, [r7, #16]
			newNode->next = temp;
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	611a      	str	r2, [r3, #16]
			list_tasks->tail->next = newNode;
 80010f8:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <sche_add_task+0x174>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	611a      	str	r2, [r3, #16]
			list_tasks->tail = newNode;
 8001102:	4b2b      	ldr	r3, [pc, #172]	@ (80011b0 <sche_add_task+0x174>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	601a      	str	r2, [r3, #0]

			list_tasks->total_delay = delay;
 800110a:	4b29      	ldr	r3, [pc, #164]	@ (80011b0 <sche_add_task+0x174>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	609a      	str	r2, [r3, #8]

			list_tasks->numTask++;
 8001112:	4b27      	ldr	r3, [pc, #156]	@ (80011b0 <sche_add_task+0x174>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	3201      	adds	r2, #1
 800111a:	605a      	str	r2, [r3, #4]

			return list_tasks->numTask - 1;
 800111c:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <sche_add_task+0x174>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	3b01      	subs	r3, #1
 8001126:	b2db      	uxtb	r3, r3
 8001128:	e03e      	b.n	80011a8 <sche_add_task+0x16c>
		}

		//Them vao giua hang doi
		uint32_t sum_delay = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
		uint8_t index = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	75fb      	strb	r3, [r7, #23]
		while (temp != list_tasks->tail) {
 8001132:	e032      	b.n	800119a <sche_add_task+0x15e>

			sum_delay += temp->delay;
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4413      	add	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]

			if(delay < sum_delay + temp->next->delay) {
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	4413      	add	r3, r2
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	429a      	cmp	r2, r3
 800114c:	d21f      	bcs.n	800118e <sche_add_task+0x152>

				newNode = create_new_node(pfunc, delay - sum_delay, period);
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4619      	mov	r1, r3
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f7ff ff33 	bl	8000fc4 <create_new_node>
 800115e:	6138      	str	r0, [r7, #16]
				newNode->next = temp->next;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	611a      	str	r2, [r3, #16]
				temp->next = newNode;
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	611a      	str	r2, [r3, #16]

				newNode->next->delay -= newNode->delay;
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	6899      	ldr	r1, [r3, #8]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	1a8a      	subs	r2, r1, r2
 800117e:	609a      	str	r2, [r3, #8]

				list_tasks->numTask++;
 8001180:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <sche_add_task+0x174>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	3201      	adds	r2, #1
 8001188:	605a      	str	r2, [r3, #4]
				return index;
 800118a:	7dfb      	ldrb	r3, [r7, #23]
 800118c:	e00c      	b.n	80011a8 <sche_add_task+0x16c>
			}
			temp = temp->next;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	61fb      	str	r3, [r7, #28]
			index++;
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	3301      	adds	r3, #1
 8001198:	75fb      	strb	r3, [r7, #23]
		while (temp != list_tasks->tail) {
 800119a:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <sche_add_task+0x174>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d1c6      	bne.n	8001134 <sche_add_task+0xf8>
		}

		return NUM_TASKS;
 80011a6:	2314      	movs	r3, #20
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200001e0 	.word	0x200001e0

080011b4 <sche_update>:

void sche_update() {
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

	if(list_tasks == NULL || list_tasks->tail == NULL) return;
 80011b8:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <sche_update+0x48>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d018      	beq.n	80011f2 <sche_update+0x3e>
 80011c0:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <sche_update+0x48>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d013      	beq.n	80011f2 <sche_update+0x3e>

	if(list_tasks->tail->next->delay > 0) list_tasks->tail->next->delay--;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <sche_update+0x48>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <sche_update+0x32>
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <sche_update+0x48>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	3a01      	subs	r2, #1
 80011e4:	609a      	str	r2, [r3, #8]

	list_tasks->total_delay--;
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <sche_update+0x48>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	3a01      	subs	r2, #1
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	e000      	b.n	80011f4 <sche_update+0x40>
	if(list_tasks == NULL || list_tasks->tail == NULL) return;
 80011f2:	bf00      	nop
}
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	200001e0 	.word	0x200001e0

08001200 <sche_dispatcher>:

void sche_dispatcher() {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0

	if(list_tasks == NULL || list_tasks->tail == NULL) return;
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <sche_dispatcher+0x5c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d022      	beq.n	8001254 <sche_dispatcher+0x54>
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <sche_dispatcher+0x5c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d01d      	beq.n	8001254 <sche_dispatcher+0x54>

	TaskNode* cur_task = list_tasks->tail->next; // head
 8001218:	4b10      	ldr	r3, [pc, #64]	@ (800125c <sche_dispatcher+0x5c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	60fb      	str	r3, [r7, #12]

	if(cur_task->delay == 0) {
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d115      	bne.n	8001256 <sche_dispatcher+0x56>

		(*(cur_task->pTask))();
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4798      	blx	r3

		uint32_t save_period = cur_task->period;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
		void (*save_pfunc)(void) = cur_task->pTask;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	607b      	str	r3, [r7, #4]

		sche_delete_task(0); // xoa task o dau hang doi
 800123c:	2000      	movs	r0, #0
 800123e:	f000 f80f 	bl	8001260 <sche_delete_task>

		if(save_period > 0) sche_add_task(save_pfunc, save_period, save_period);
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d006      	beq.n	8001256 <sche_dispatcher+0x56>
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fef5 	bl	800103c <sche_add_task>
 8001252:	e000      	b.n	8001256 <sche_dispatcher+0x56>
	if(list_tasks == NULL || list_tasks->tail == NULL) return;
 8001254:	bf00      	nop

//		cur_task = cur_task->next;
	}
}
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200001e0 	.word	0x200001e0

08001260 <sche_delete_task>:

void sche_delete_task(uint8_t taskID) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]

	if(taskID >= list_tasks->numTask) return;
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <sche_delete_task+0x7c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	429a      	cmp	r2, r3
 8001274:	d22d      	bcs.n	80012d2 <sche_delete_task+0x72>

	TaskNode* preNode = list_tasks->tail;
 8001276:	4b19      	ldr	r3, [pc, #100]	@ (80012dc <sche_delete_task+0x7c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	617b      	str	r3, [r7, #20]

	if(preNode == preNode->next) {
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	429a      	cmp	r2, r3
 8001286:	d107      	bne.n	8001298 <sche_delete_task+0x38>
		list_tasks->tail = NULL;
 8001288:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <sche_delete_task+0x7c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
		free(preNode);
 8001290:	6978      	ldr	r0, [r7, #20]
 8001292:	f002 fb37 	bl	8003904 <free>
		return;
 8001296:	e01d      	b.n	80012d4 <sche_delete_task+0x74>
	}

	for(uint8_t i = 0; i < taskID; i++) preNode = preNode->next;
 8001298:	2300      	movs	r3, #0
 800129a:	74fb      	strb	r3, [r7, #19]
 800129c:	e005      	b.n	80012aa <sche_delete_task+0x4a>
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	7cfb      	ldrb	r3, [r7, #19]
 80012a6:	3301      	adds	r3, #1
 80012a8:	74fb      	strb	r3, [r7, #19]
 80012aa:	7cfa      	ldrb	r2, [r7, #19]
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d3f5      	bcc.n	800129e <sche_delete_task+0x3e>

	TaskNode* delNode = preNode->next;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	60fb      	str	r3, [r7, #12]
	preNode->next = delNode->next;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	611a      	str	r2, [r3, #16]

	free(delNode);
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f002 fb1f 	bl	8003904 <free>

	list_tasks->numTask--;
 80012c6:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <sche_delete_task+0x7c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	3a01      	subs	r2, #1
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	e000      	b.n	80012d4 <sche_delete_task+0x74>
	if(taskID >= list_tasks->numTask) return;
 80012d2:	bf00      	nop
}
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200001e0 	.word	0x200001e0

080012e0 <timer_init>:

uint8_t flag_timer[max_timer];
int timer_counter[max_timer];


void timer_init(){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80012e4:	4804      	ldr	r0, [pc, #16]	@ (80012f8 <timer_init+0x18>)
 80012e6:	f001 ff63 	bl	80031b0 <HAL_TIM_Base_Start_IT>
	setTimer(2, 40);
 80012ea:	2128      	movs	r1, #40	@ 0x28
 80012ec:	2002      	movs	r0, #2
 80012ee:	f000 f815 	bl	800131c <setTimer>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000198 	.word	0x20000198

080012fc <is_flag_set>:

uint8_t is_flag_set(uint8_t index) {
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	return flag_timer[index];
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	4a03      	ldr	r2, [pc, #12]	@ (8001318 <is_flag_set+0x1c>)
 800130a:	5cd3      	ldrb	r3, [r2, r3]
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	200001e4 	.word	0x200001e4

0800131c <setTimer>:

void setTimer(uint8_t index, uint16_t duration){
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	4613      	mov	r3, r2
 800132a:	80bb      	strh	r3, [r7, #4]
	timer_counter[index] = duration / TIMER_CYCLE;
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	4a09      	ldr	r2, [pc, #36]	@ (8001354 <setTimer+0x38>)
 8001330:	fba2 2303 	umull	r2, r3, r2, r3
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	b29a      	uxth	r2, r3
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	4611      	mov	r1, r2
 800133c:	4a06      	ldr	r2, [pc, #24]	@ (8001358 <setTimer+0x3c>)
 800133e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	flag_timer[index] = 0;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4a05      	ldr	r2, [pc, #20]	@ (800135c <setTimer+0x40>)
 8001346:	2100      	movs	r1, #0
 8001348:	54d1      	strb	r1, [r2, r3]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	cccccccd 	.word	0xcccccccd
 8001358:	200001f0 	.word	0x200001f0
 800135c:	200001e4 	.word	0x200001e4

08001360 <timer_run>:

void timer_run(){
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < max_timer; i++) {
 8001366:	2300      	movs	r3, #0
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	e014      	b.n	8001396 <timer_run+0x36>
		timer_counter[i]--;
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4a0e      	ldr	r2, [pc, #56]	@ (80013a8 <timer_run+0x48>)
 8001370:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001374:	3a01      	subs	r2, #1
 8001376:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <timer_run+0x48>)
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] <= 0)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <timer_run+0x48>)
 8001380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001384:	2b00      	cmp	r3, #0
 8001386:	dc03      	bgt.n	8001390 <timer_run+0x30>
			flag_timer[i] = 1;
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <timer_run+0x4c>)
 800138c:	2101      	movs	r1, #1
 800138e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < max_timer; i++) {
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	3301      	adds	r3, #1
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2b09      	cmp	r3, #9
 800139a:	d9e7      	bls.n	800136c <timer_run+0xc>
	}
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	200001f0 	.word	0x200001f0
 80013ac:	200001e4 	.word	0x200001e4

080013b0 <HAL_TIM_PeriodElapsedCallback>:

///////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013c0:	d105      	bne.n	80013ce <HAL_TIM_PeriodElapsedCallback+0x1e>
		timer_run();
 80013c2:	f7ff ffcd 	bl	8001360 <timer_run>
		getKeyInput();
 80013c6:	f7ff f9ab 	bl	8000720 <getKeyInput>
		sche_update();
 80013ca:	f7ff fef3 	bl	80011b4 <sche_update>
	}
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <HAL_MspInit+0x5c>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <HAL_MspInit+0x5c>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6193      	str	r3, [r2, #24]
 80013ea:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <HAL_MspInit+0x5c>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <HAL_MspInit+0x5c>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001434 <HAL_MspInit+0x5c>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001400:	61d3      	str	r3, [r2, #28]
 8001402:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <HAL_MspInit+0x5c>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800140e:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <HAL_MspInit+0x60>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	4a04      	ldr	r2, [pc, #16]	@ (8001438 <HAL_MspInit+0x60>)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	40021000 	.word	0x40021000
 8001438:	40010000 	.word	0x40010000

0800143c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a1d      	ldr	r2, [pc, #116]	@ (80014cc <HAL_I2C_MspInit+0x90>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d132      	bne.n	80014c2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <HAL_I2C_MspInit+0x94>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4a1b      	ldr	r2, [pc, #108]	@ (80014d0 <HAL_I2C_MspInit+0x94>)
 8001462:	f043 0308 	orr.w	r3, r3, #8
 8001466:	6193      	str	r3, [r2, #24]
 8001468:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <HAL_I2C_MspInit+0x94>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001474:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147a:	2312      	movs	r3, #18
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4812      	ldr	r0, [pc, #72]	@ (80014d4 <HAL_I2C_MspInit+0x98>)
 800148a:	f000 fbdd 	bl	8001c48 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_I2C_MspInit+0x9c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
 800149c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014a4:	4a0c      	ldr	r2, [pc, #48]	@ (80014d8 <HAL_I2C_MspInit+0x9c>)
 80014a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <HAL_I2C_MspInit+0x94>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a08      	ldr	r2, [pc, #32]	@ (80014d0 <HAL_I2C_MspInit+0x94>)
 80014b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014b4:	61d3      	str	r3, [r2, #28]
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_I2C_MspInit+0x94>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	@ 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40005400 	.word	0x40005400
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010c00 	.word	0x40010c00
 80014d8:	40010000 	.word	0x40010000

080014dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014ec:	d113      	bne.n	8001516 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <HAL_TIM_Base_MspInit+0x44>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001520 <HAL_TIM_Base_MspInit+0x44>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	61d3      	str	r3, [r2, #28]
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <HAL_TIM_Base_MspInit+0x44>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	201c      	movs	r0, #28
 800150c:	f000 fb65 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001510:	201c      	movs	r0, #28
 8001512:	f000 fb7e 	bl	8001c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <NMI_Handler+0x4>

0800152c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <MemManage_Handler+0x4>

0800153c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <UsageFault_Handler+0x4>

0800154c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001574:	f000 fa1a 	bl	80019ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001580:	4802      	ldr	r0, [pc, #8]	@ (800158c <TIM2_IRQHandler+0x10>)
 8001582:	f001 fe67 	bl	8003254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000198 	.word	0x20000198

08001590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001598:	4a14      	ldr	r2, [pc, #80]	@ (80015ec <_sbrk+0x5c>)
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <_sbrk+0x60>)
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <_sbrk+0x64>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	@ (80015f8 <_sbrk+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d207      	bcs.n	80015d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c0:	f002 fa8e 	bl	8003ae0 <__errno>
 80015c4:	4603      	mov	r3, r0
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e009      	b.n	80015e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d6:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	4a05      	ldr	r2, [pc, #20]	@ (80015f4 <_sbrk+0x64>)
 80015e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20005000 	.word	0x20005000
 80015f0:	00000400 	.word	0x00000400
 80015f4:	20000218 	.word	0x20000218
 80015f8:	20000368 	.word	0x20000368

080015fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <set_time_value>:
 *      Author: LEGION
 */
#include "traffic_light.h"


void set_time_value(COLOR color, uint16_t new_time) {
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	460a      	mov	r2, r1
 8001612:	71fb      	strb	r3, [r7, #7]
 8001614:	4613      	mov	r3, r2
 8001616:	80bb      	strh	r3, [r7, #4]

	if(color < NUM_COLOR)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d804      	bhi.n	8001628 <set_time_value+0x20>
		time_of_color[color] = new_time;
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4904      	ldr	r1, [pc, #16]	@ (8001634 <set_time_value+0x2c>)
 8001622:	88ba      	ldrh	r2, [r7, #4]
 8001624:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000000 	.word	0x20000000

08001638 <turn_off_traffic_light>:

void turn_off_traffic_light() {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < 2; i++) {
 800163e:	2300      	movs	r3, #0
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	e01c      	b.n	800167e <turn_off_traffic_light+0x46>
		HAL_GPIO_WritePin(Traffic_Light1[i].Port, Traffic_Light1[i].Pin, GPIO_PIN_RESET);
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <turn_off_traffic_light+0x58>)
 8001648:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4a10      	ldr	r2, [pc, #64]	@ (8001690 <turn_off_traffic_light+0x58>)
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4413      	add	r3, r2
 8001654:	889b      	ldrh	r3, [r3, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	4619      	mov	r1, r3
 800165a:	f000 fc90 	bl	8001f7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_Light2[i].Port, Traffic_Light2[i].Pin, GPIO_PIN_RESET);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4a0c      	ldr	r2, [pc, #48]	@ (8001694 <turn_off_traffic_light+0x5c>)
 8001662:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <turn_off_traffic_light+0x5c>)
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4413      	add	r3, r2
 800166e:	889b      	ldrh	r3, [r3, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	f000 fc83 	bl	8001f7e <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < 2; i++) {
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	3301      	adds	r3, #1
 800167c:	71fb      	strb	r3, [r7, #7]
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d9df      	bls.n	8001644 <turn_off_traffic_light+0xc>
	}
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000008 	.word	0x20000008
 8001694:	20000018 	.word	0x20000018

08001698 <Turn_on_color>:

void Turn_on_color(GPIO_Config Light[2], COLOR color) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]

	switch(color) {
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d019      	beq.n	80016de <Turn_on_color+0x46>
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	dc3d      	bgt.n	800172a <Turn_on_color+0x92>
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <Turn_on_color+0x20>
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d026      	beq.n	8001704 <Turn_on_color+0x6c>
		case yellow:
			HAL_GPIO_WritePin(Light[0].Port, Light[0].Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Light[1].Port, Light[1].Pin, GPIO_PIN_SET);
			break;
		default:
			break;
 80016b6:	e038      	b.n	800172a <Turn_on_color+0x92>
			HAL_GPIO_WritePin(Light[0].Port, Light[0].Pin, GPIO_PIN_SET);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	889b      	ldrh	r3, [r3, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	4619      	mov	r1, r3
 80016c4:	f000 fc5b 	bl	8001f7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Light[1].Port, Light[1].Pin, GPIO_PIN_SET);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3308      	adds	r3, #8
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3308      	adds	r3, #8
 80016d2:	889b      	ldrh	r3, [r3, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	4619      	mov	r1, r3
 80016d8:	f000 fc51 	bl	8001f7e <HAL_GPIO_WritePin>
			break;
 80016dc:	e026      	b.n	800172c <Turn_on_color+0x94>
			HAL_GPIO_WritePin(Light[0].Port, Light[0].Pin, GPIO_PIN_SET);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	889b      	ldrh	r3, [r3, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	4619      	mov	r1, r3
 80016ea:	f000 fc48 	bl	8001f7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Light[1].Port, Light[1].Pin, GPIO_PIN_RESET);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3308      	adds	r3, #8
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3308      	adds	r3, #8
 80016f8:	889b      	ldrh	r3, [r3, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	4619      	mov	r1, r3
 80016fe:	f000 fc3e 	bl	8001f7e <HAL_GPIO_WritePin>
			break;
 8001702:	e013      	b.n	800172c <Turn_on_color+0x94>
			HAL_GPIO_WritePin(Light[0].Port, Light[0].Pin, GPIO_PIN_RESET);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	889b      	ldrh	r3, [r3, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	f000 fc35 	bl	8001f7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Light[1].Port, Light[1].Pin, GPIO_PIN_SET);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3308      	adds	r3, #8
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3308      	adds	r3, #8
 800171e:	889b      	ldrh	r3, [r3, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	4619      	mov	r1, r3
 8001724:	f000 fc2b 	bl	8001f7e <HAL_GPIO_WritePin>
			break;
 8001728:	e000      	b.n	800172c <Turn_on_color+0x94>
			break;
 800172a:	bf00      	nop
	}
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <TrafficLight_run>:

void TrafficLight_run() {
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0

	if(status_mode != NORMAL) return;
 8001738:	4b5f      	ldr	r3, [pc, #380]	@ (80018b8 <TrafficLight_run+0x184>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b0a      	cmp	r3, #10
 800173e:	f040 80b7 	bne.w	80018b0 <TrafficLight_run+0x17c>

	switch (status_traffic_light) {
 8001742:	4b5e      	ldr	r3, [pc, #376]	@ (80018bc <TrafficLight_run+0x188>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b05      	cmp	r3, #5
 8001748:	f200 80b4 	bhi.w	80018b4 <TrafficLight_run+0x180>
 800174c:	a201      	add	r2, pc, #4	@ (adr r2, 8001754 <TrafficLight_run+0x20>)
 800174e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001752:	bf00      	nop
 8001754:	0800176d 	.word	0x0800176d
 8001758:	080018b5 	.word	0x080018b5
 800175c:	08001787 	.word	0x08001787
 8001760:	080017c7 	.word	0x080017c7
 8001764:	0800180f 	.word	0x0800180f
 8001768:	0800184f 	.word	0x0800184f
		case INIT:
			turn_off_traffic_light();
 800176c:	f7ff ff64 	bl	8001638 <turn_off_traffic_light>

			status_traffic_light =	green_red;
 8001770:	4b52      	ldr	r3, [pc, #328]	@ (80018bc <TrafficLight_run+0x188>)
 8001772:	2202      	movs	r2, #2
 8001774:	701a      	strb	r2, [r3, #0]

			count_road1 = time_of_color[green];
 8001776:	4b52      	ldr	r3, [pc, #328]	@ (80018c0 <TrafficLight_run+0x18c>)
 8001778:	889a      	ldrh	r2, [r3, #4]
 800177a:	4b52      	ldr	r3, [pc, #328]	@ (80018c4 <TrafficLight_run+0x190>)
 800177c:	801a      	strh	r2, [r3, #0]
			count_road2 = time_of_color[red];
 800177e:	4b50      	ldr	r3, [pc, #320]	@ (80018c0 <TrafficLight_run+0x18c>)
 8001780:	881a      	ldrh	r2, [r3, #0]
 8001782:	4b51      	ldr	r3, [pc, #324]	@ (80018c8 <TrafficLight_run+0x194>)
 8001784:	801a      	strh	r2, [r3, #0]

		case green_red:

			Turn_on_color(Traffic_Light1, green);
 8001786:	2102      	movs	r1, #2
 8001788:	4850      	ldr	r0, [pc, #320]	@ (80018cc <TrafficLight_run+0x198>)
 800178a:	f7ff ff85 	bl	8001698 <Turn_on_color>
			Turn_on_color(Traffic_Light2, red);
 800178e:	2100      	movs	r1, #0
 8001790:	484f      	ldr	r0, [pc, #316]	@ (80018d0 <TrafficLight_run+0x19c>)
 8001792:	f7ff ff81 	bl	8001698 <Turn_on_color>

			if(count_road1 > 0) {
 8001796:	4b4b      	ldr	r3, [pc, #300]	@ (80018c4 <TrafficLight_run+0x190>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00c      	beq.n	80017b8 <TrafficLight_run+0x84>
				count_road1--;
 800179e:	4b49      	ldr	r3, [pc, #292]	@ (80018c4 <TrafficLight_run+0x190>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	4b47      	ldr	r3, [pc, #284]	@ (80018c4 <TrafficLight_run+0x190>)
 80017a8:	801a      	strh	r2, [r3, #0]
				count_road2--;
 80017aa:	4b47      	ldr	r3, [pc, #284]	@ (80018c8 <TrafficLight_run+0x194>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b45      	ldr	r3, [pc, #276]	@ (80018c8 <TrafficLight_run+0x194>)
 80017b4:	801a      	strh	r2, [r3, #0]
				break;
 80017b6:	e07e      	b.n	80018b6 <TrafficLight_run+0x182>
			}
			else {
				count_road1 = time_of_color[yellow];
 80017b8:	4b41      	ldr	r3, [pc, #260]	@ (80018c0 <TrafficLight_run+0x18c>)
 80017ba:	885a      	ldrh	r2, [r3, #2]
 80017bc:	4b41      	ldr	r3, [pc, #260]	@ (80018c4 <TrafficLight_run+0x190>)
 80017be:	801a      	strh	r2, [r3, #0]
//				count_road2--;
				status_traffic_light = yellow_red;
 80017c0:	4b3e      	ldr	r3, [pc, #248]	@ (80018bc <TrafficLight_run+0x188>)
 80017c2:	2203      	movs	r2, #3
 80017c4:	701a      	strb	r2, [r3, #0]
			}

		case yellow_red:

			Turn_on_color(Traffic_Light1, yellow);
 80017c6:	2101      	movs	r1, #1
 80017c8:	4840      	ldr	r0, [pc, #256]	@ (80018cc <TrafficLight_run+0x198>)
 80017ca:	f7ff ff65 	bl	8001698 <Turn_on_color>
			Turn_on_color(Traffic_Light2, red);
 80017ce:	2100      	movs	r1, #0
 80017d0:	483f      	ldr	r0, [pc, #252]	@ (80018d0 <TrafficLight_run+0x19c>)
 80017d2:	f7ff ff61 	bl	8001698 <Turn_on_color>

			if(count_road1 > 0) {
 80017d6:	4b3b      	ldr	r3, [pc, #236]	@ (80018c4 <TrafficLight_run+0x190>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00c      	beq.n	80017f8 <TrafficLight_run+0xc4>
				count_road1--;
 80017de:	4b39      	ldr	r3, [pc, #228]	@ (80018c4 <TrafficLight_run+0x190>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	4b37      	ldr	r3, [pc, #220]	@ (80018c4 <TrafficLight_run+0x190>)
 80017e8:	801a      	strh	r2, [r3, #0]
				count_road2--;
 80017ea:	4b37      	ldr	r3, [pc, #220]	@ (80018c8 <TrafficLight_run+0x194>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	4b35      	ldr	r3, [pc, #212]	@ (80018c8 <TrafficLight_run+0x194>)
 80017f4:	801a      	strh	r2, [r3, #0]
				break;
 80017f6:	e05e      	b.n	80018b6 <TrafficLight_run+0x182>
			}
			else {
				count_road1 = time_of_color[red];
 80017f8:	4b31      	ldr	r3, [pc, #196]	@ (80018c0 <TrafficLight_run+0x18c>)
 80017fa:	881a      	ldrh	r2, [r3, #0]
 80017fc:	4b31      	ldr	r3, [pc, #196]	@ (80018c4 <TrafficLight_run+0x190>)
 80017fe:	801a      	strh	r2, [r3, #0]
				count_road2 = time_of_color[green];
 8001800:	4b2f      	ldr	r3, [pc, #188]	@ (80018c0 <TrafficLight_run+0x18c>)
 8001802:	889a      	ldrh	r2, [r3, #4]
 8001804:	4b30      	ldr	r3, [pc, #192]	@ (80018c8 <TrafficLight_run+0x194>)
 8001806:	801a      	strh	r2, [r3, #0]
				status_traffic_light = red_green;
 8001808:	4b2c      	ldr	r3, [pc, #176]	@ (80018bc <TrafficLight_run+0x188>)
 800180a:	2204      	movs	r2, #4
 800180c:	701a      	strb	r2, [r3, #0]
			}

		case red_green:

			Turn_on_color(Traffic_Light1, red);
 800180e:	2100      	movs	r1, #0
 8001810:	482e      	ldr	r0, [pc, #184]	@ (80018cc <TrafficLight_run+0x198>)
 8001812:	f7ff ff41 	bl	8001698 <Turn_on_color>
			Turn_on_color(Traffic_Light2, green);
 8001816:	2102      	movs	r1, #2
 8001818:	482d      	ldr	r0, [pc, #180]	@ (80018d0 <TrafficLight_run+0x19c>)
 800181a:	f7ff ff3d 	bl	8001698 <Turn_on_color>

			if(count_road2 > 0) {
 800181e:	4b2a      	ldr	r3, [pc, #168]	@ (80018c8 <TrafficLight_run+0x194>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00c      	beq.n	8001840 <TrafficLight_run+0x10c>
				count_road1--;
 8001826:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <TrafficLight_run+0x190>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	3b01      	subs	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <TrafficLight_run+0x190>)
 8001830:	801a      	strh	r2, [r3, #0]
				count_road2--;
 8001832:	4b25      	ldr	r3, [pc, #148]	@ (80018c8 <TrafficLight_run+0x194>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	3b01      	subs	r3, #1
 8001838:	b29a      	uxth	r2, r3
 800183a:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <TrafficLight_run+0x194>)
 800183c:	801a      	strh	r2, [r3, #0]
				break;
 800183e:	e03a      	b.n	80018b6 <TrafficLight_run+0x182>
			}
			else {
//				count_road1--;
				count_road2 = time_of_color[yellow];
 8001840:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <TrafficLight_run+0x18c>)
 8001842:	885a      	ldrh	r2, [r3, #2]
 8001844:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <TrafficLight_run+0x194>)
 8001846:	801a      	strh	r2, [r3, #0]
				status_traffic_light = red_yellow;
 8001848:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <TrafficLight_run+0x188>)
 800184a:	2205      	movs	r2, #5
 800184c:	701a      	strb	r2, [r3, #0]
			}

		case red_yellow:

			Turn_on_color(Traffic_Light1, red);
 800184e:	2100      	movs	r1, #0
 8001850:	481e      	ldr	r0, [pc, #120]	@ (80018cc <TrafficLight_run+0x198>)
 8001852:	f7ff ff21 	bl	8001698 <Turn_on_color>
			Turn_on_color(Traffic_Light2, yellow);
 8001856:	2101      	movs	r1, #1
 8001858:	481d      	ldr	r0, [pc, #116]	@ (80018d0 <TrafficLight_run+0x19c>)
 800185a:	f7ff ff1d 	bl	8001698 <Turn_on_color>

			if(count_road2 > 0) {
 800185e:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <TrafficLight_run+0x194>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00c      	beq.n	8001880 <TrafficLight_run+0x14c>
				count_road1--;
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <TrafficLight_run+0x190>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	3b01      	subs	r3, #1
 800186c:	b29a      	uxth	r2, r3
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <TrafficLight_run+0x190>)
 8001870:	801a      	strh	r2, [r3, #0]
				count_road2--;
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <TrafficLight_run+0x194>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	3b01      	subs	r3, #1
 8001878:	b29a      	uxth	r2, r3
 800187a:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <TrafficLight_run+0x194>)
 800187c:	801a      	strh	r2, [r3, #0]
				break;
 800187e:	e01a      	b.n	80018b6 <TrafficLight_run+0x182>
			}
			else {
				count_road1 = time_of_color[green] - 1;
 8001880:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <TrafficLight_run+0x18c>)
 8001882:	889b      	ldrh	r3, [r3, #4]
 8001884:	3b01      	subs	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <TrafficLight_run+0x190>)
 800188a:	801a      	strh	r2, [r3, #0]
				count_road2 = time_of_color[red] - 1;
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <TrafficLight_run+0x18c>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <TrafficLight_run+0x194>)
 8001896:	801a      	strh	r2, [r3, #0]

				status_traffic_light = green_red;
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <TrafficLight_run+0x188>)
 800189a:	2202      	movs	r2, #2
 800189c:	701a      	strb	r2, [r3, #0]

				Turn_on_color(Traffic_Light1, green);
 800189e:	2102      	movs	r1, #2
 80018a0:	480a      	ldr	r0, [pc, #40]	@ (80018cc <TrafficLight_run+0x198>)
 80018a2:	f7ff fef9 	bl	8001698 <Turn_on_color>
				Turn_on_color(Traffic_Light2, red);
 80018a6:	2100      	movs	r1, #0
 80018a8:	4809      	ldr	r0, [pc, #36]	@ (80018d0 <TrafficLight_run+0x19c>)
 80018aa:	f7ff fef5 	bl	8001698 <Turn_on_color>
			}
		default:
			break;
 80018ae:	e001      	b.n	80018b4 <TrafficLight_run+0x180>
	if(status_mode != NORMAL) return;
 80018b0:	bf00      	nop
 80018b2:	e000      	b.n	80018b6 <TrafficLight_run+0x182>
			break;
 80018b4:	bf00      	nop
	}

//	displayLCD();
}
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000028 	.word	0x20000028
 80018bc:	200000d6 	.word	0x200000d6
 80018c0:	20000000 	.word	0x20000000
 80018c4:	200000d8 	.word	0x200000d8
 80018c8:	200000da 	.word	0x200000da
 80018cc:	20000008 	.word	0x20000008
 80018d0:	20000018 	.word	0x20000018

080018d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d4:	f7ff fe92 	bl	80015fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d8:	480b      	ldr	r0, [pc, #44]	@ (8001908 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018da:	490c      	ldr	r1, [pc, #48]	@ (800190c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001910 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e0:	e002      	b.n	80018e8 <LoopCopyDataInit>

080018e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e6:	3304      	adds	r3, #4

080018e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ec:	d3f9      	bcc.n	80018e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ee:	4a09      	ldr	r2, [pc, #36]	@ (8001914 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018f0:	4c09      	ldr	r4, [pc, #36]	@ (8001918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f4:	e001      	b.n	80018fa <LoopFillZerobss>

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f8:	3204      	adds	r2, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018fe:	f002 f8f5 	bl	8003aec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001902:	f7ff fa19 	bl	8000d38 <main>
  bx lr
 8001906:	4770      	bx	lr
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001910:	08004380 	.word	0x08004380
  ldr r2, =_sbss
 8001914:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001918:	20000368 	.word	0x20000368

0800191c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC1_2_IRQHandler>
	...

08001920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001924:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <HAL_Init+0x28>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a07      	ldr	r2, [pc, #28]	@ (8001948 <HAL_Init+0x28>)
 800192a:	f043 0310 	orr.w	r3, r3, #16
 800192e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001930:	2003      	movs	r0, #3
 8001932:	f000 f947 	bl	8001bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001936:	200f      	movs	r0, #15
 8001938:	f000 f808 	bl	800194c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800193c:	f7ff fd4c 	bl	80013d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40022000 	.word	0x40022000

0800194c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001954:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_InitTick+0x54>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <HAL_InitTick+0x58>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001962:	fbb3 f3f1 	udiv	r3, r3, r1
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f95f 	bl	8001c2e <HAL_SYSTICK_Config>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e00e      	b.n	8001998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b0f      	cmp	r3, #15
 800197e:	d80a      	bhi.n	8001996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001980:	2200      	movs	r2, #0
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f000 f927 	bl	8001bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800198c:	4a06      	ldr	r2, [pc, #24]	@ (80019a8 <HAL_InitTick+0x5c>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2000002c 	.word	0x2000002c
 80019a4:	20000034 	.word	0x20000034
 80019a8:	20000030 	.word	0x20000030

080019ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <HAL_IncTick+0x1c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <HAL_IncTick+0x20>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a03      	ldr	r2, [pc, #12]	@ (80019cc <HAL_IncTick+0x20>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	20000034 	.word	0x20000034
 80019cc:	2000021c 	.word	0x2000021c

080019d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b02      	ldr	r3, [pc, #8]	@ (80019e0 <HAL_GetTick+0x10>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	2000021c 	.word	0x2000021c

080019e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff fff0 	bl	80019d0 <HAL_GetTick>
 80019f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d005      	beq.n	8001a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <HAL_Delay+0x44>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a0a:	bf00      	nop
 8001a0c:	f7ff ffe0 	bl	80019d0 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d8f7      	bhi.n	8001a0c <HAL_Delay+0x28>
  {
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000034 	.word	0x20000034

08001a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a78:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <__NVIC_GetPriorityGrouping+0x18>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	f003 0307 	and.w	r3, r3, #7
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db0b      	blt.n	8001aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	4906      	ldr	r1, [pc, #24]	@ (8001ac4 <__NVIC_EnableIRQ+0x34>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	@ (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	@ (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	@ 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	@ 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b90:	d301      	bcc.n	8001b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00f      	b.n	8001bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b96:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc0 <SysTick_Config+0x40>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f7ff ff90 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba8:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <SysTick_Config+0x40>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bae:	4b04      	ldr	r3, [pc, #16]	@ (8001bc0 <SysTick_Config+0x40>)
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	e000e010 	.word	0xe000e010

08001bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff2d 	bl	8001a2c <__NVIC_SetPriorityGrouping>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bec:	f7ff ff42 	bl	8001a74 <__NVIC_GetPriorityGrouping>
 8001bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff ff90 	bl	8001b1c <NVIC_EncodePriority>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff5f 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff35 	bl	8001a90 <__NVIC_EnableIRQ>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffa2 	bl	8001b80 <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b08b      	sub	sp, #44	@ 0x2c
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5a:	e169      	b.n	8001f30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	f040 8158 	bne.w	8001f2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4a9a      	ldr	r2, [pc, #616]	@ (8001ee8 <HAL_GPIO_Init+0x2a0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d05e      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
 8001c84:	4a98      	ldr	r2, [pc, #608]	@ (8001ee8 <HAL_GPIO_Init+0x2a0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d875      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001c8a:	4a98      	ldr	r2, [pc, #608]	@ (8001eec <HAL_GPIO_Init+0x2a4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d058      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
 8001c90:	4a96      	ldr	r2, [pc, #600]	@ (8001eec <HAL_GPIO_Init+0x2a4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d86f      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001c96:	4a96      	ldr	r2, [pc, #600]	@ (8001ef0 <HAL_GPIO_Init+0x2a8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d052      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
 8001c9c:	4a94      	ldr	r2, [pc, #592]	@ (8001ef0 <HAL_GPIO_Init+0x2a8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d869      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001ca2:	4a94      	ldr	r2, [pc, #592]	@ (8001ef4 <HAL_GPIO_Init+0x2ac>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d04c      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
 8001ca8:	4a92      	ldr	r2, [pc, #584]	@ (8001ef4 <HAL_GPIO_Init+0x2ac>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d863      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001cae:	4a92      	ldr	r2, [pc, #584]	@ (8001ef8 <HAL_GPIO_Init+0x2b0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d046      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
 8001cb4:	4a90      	ldr	r2, [pc, #576]	@ (8001ef8 <HAL_GPIO_Init+0x2b0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d85d      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001cba:	2b12      	cmp	r3, #18
 8001cbc:	d82a      	bhi.n	8001d14 <HAL_GPIO_Init+0xcc>
 8001cbe:	2b12      	cmp	r3, #18
 8001cc0:	d859      	bhi.n	8001d76 <HAL_GPIO_Init+0x12e>
 8001cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc8 <HAL_GPIO_Init+0x80>)
 8001cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc8:	08001d43 	.word	0x08001d43
 8001ccc:	08001d1d 	.word	0x08001d1d
 8001cd0:	08001d2f 	.word	0x08001d2f
 8001cd4:	08001d71 	.word	0x08001d71
 8001cd8:	08001d77 	.word	0x08001d77
 8001cdc:	08001d77 	.word	0x08001d77
 8001ce0:	08001d77 	.word	0x08001d77
 8001ce4:	08001d77 	.word	0x08001d77
 8001ce8:	08001d77 	.word	0x08001d77
 8001cec:	08001d77 	.word	0x08001d77
 8001cf0:	08001d77 	.word	0x08001d77
 8001cf4:	08001d77 	.word	0x08001d77
 8001cf8:	08001d77 	.word	0x08001d77
 8001cfc:	08001d77 	.word	0x08001d77
 8001d00:	08001d77 	.word	0x08001d77
 8001d04:	08001d77 	.word	0x08001d77
 8001d08:	08001d77 	.word	0x08001d77
 8001d0c:	08001d25 	.word	0x08001d25
 8001d10:	08001d39 	.word	0x08001d39
 8001d14:	4a79      	ldr	r2, [pc, #484]	@ (8001efc <HAL_GPIO_Init+0x2b4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d1a:	e02c      	b.n	8001d76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	623b      	str	r3, [r7, #32]
          break;
 8001d22:	e029      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	623b      	str	r3, [r7, #32]
          break;
 8001d2c:	e024      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	3308      	adds	r3, #8
 8001d34:	623b      	str	r3, [r7, #32]
          break;
 8001d36:	e01f      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	330c      	adds	r3, #12
 8001d3e:	623b      	str	r3, [r7, #32]
          break;
 8001d40:	e01a      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	623b      	str	r3, [r7, #32]
          break;
 8001d4e:	e013      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d105      	bne.n	8001d64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d58:	2308      	movs	r3, #8
 8001d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	611a      	str	r2, [r3, #16]
          break;
 8001d62:	e009      	b.n	8001d78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d64:	2308      	movs	r3, #8
 8001d66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	615a      	str	r2, [r3, #20]
          break;
 8001d6e:	e003      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
          break;
 8001d74:	e000      	b.n	8001d78 <HAL_GPIO_Init+0x130>
          break;
 8001d76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2bff      	cmp	r3, #255	@ 0xff
 8001d7c:	d801      	bhi.n	8001d82 <HAL_GPIO_Init+0x13a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	e001      	b.n	8001d86 <HAL_GPIO_Init+0x13e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3304      	adds	r3, #4
 8001d86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2bff      	cmp	r3, #255	@ 0xff
 8001d8c:	d802      	bhi.n	8001d94 <HAL_GPIO_Init+0x14c>
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	e002      	b.n	8001d9a <HAL_GPIO_Init+0x152>
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	3b08      	subs	r3, #8
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	210f      	movs	r1, #15
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	fa01 f303 	lsl.w	r3, r1, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	401a      	ands	r2, r3
 8001dac:	6a39      	ldr	r1, [r7, #32]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	431a      	orrs	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80b1 	beq.w	8001f2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8001f00 <HAL_GPIO_Init+0x2b8>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	4a4c      	ldr	r2, [pc, #304]	@ (8001f00 <HAL_GPIO_Init+0x2b8>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6193      	str	r3, [r2, #24]
 8001dd4:	4b4a      	ldr	r3, [pc, #296]	@ (8001f00 <HAL_GPIO_Init+0x2b8>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001de0:	4a48      	ldr	r2, [pc, #288]	@ (8001f04 <HAL_GPIO_Init+0x2bc>)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	3302      	adds	r3, #2
 8001de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	220f      	movs	r2, #15
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4013      	ands	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a40      	ldr	r2, [pc, #256]	@ (8001f08 <HAL_GPIO_Init+0x2c0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d013      	beq.n	8001e34 <HAL_GPIO_Init+0x1ec>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f0c <HAL_GPIO_Init+0x2c4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d00d      	beq.n	8001e30 <HAL_GPIO_Init+0x1e8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a3e      	ldr	r2, [pc, #248]	@ (8001f10 <HAL_GPIO_Init+0x2c8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d007      	beq.n	8001e2c <HAL_GPIO_Init+0x1e4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f14 <HAL_GPIO_Init+0x2cc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_GPIO_Init+0x1e0>
 8001e24:	2303      	movs	r3, #3
 8001e26:	e006      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e28:	2304      	movs	r3, #4
 8001e2a:	e004      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e002      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e34:	2300      	movs	r3, #0
 8001e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e38:	f002 0203 	and.w	r2, r2, #3
 8001e3c:	0092      	lsls	r2, r2, #2
 8001e3e:	4093      	lsls	r3, r2
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e46:	492f      	ldr	r1, [pc, #188]	@ (8001f04 <HAL_GPIO_Init+0x2bc>)
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d006      	beq.n	8001e6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e60:	4b2d      	ldr	r3, [pc, #180]	@ (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	492c      	ldr	r1, [pc, #176]	@ (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]
 8001e6c:	e006      	b.n	8001e7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	4928      	ldr	r1, [pc, #160]	@ (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d006      	beq.n	8001e96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e88:	4b23      	ldr	r3, [pc, #140]	@ (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	4922      	ldr	r1, [pc, #136]	@ (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60cb      	str	r3, [r1, #12]
 8001e94:	e006      	b.n	8001ea4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e96:	4b20      	ldr	r3, [pc, #128]	@ (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	491e      	ldr	r1, [pc, #120]	@ (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eb0:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4918      	ldr	r1, [pc, #96]	@ (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ebe:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	4914      	ldr	r1, [pc, #80]	@ (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d021      	beq.n	8001f1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	490e      	ldr	r1, [pc, #56]	@ (8001f18 <HAL_GPIO_Init+0x2d0>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]
 8001ee4:	e021      	b.n	8001f2a <HAL_GPIO_Init+0x2e2>
 8001ee6:	bf00      	nop
 8001ee8:	10320000 	.word	0x10320000
 8001eec:	10310000 	.word	0x10310000
 8001ef0:	10220000 	.word	0x10220000
 8001ef4:	10210000 	.word	0x10210000
 8001ef8:	10120000 	.word	0x10120000
 8001efc:	10110000 	.word	0x10110000
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40010800 	.word	0x40010800
 8001f0c:	40010c00 	.word	0x40010c00
 8001f10:	40011000 	.word	0x40011000
 8001f14:	40011400 	.word	0x40011400
 8001f18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <HAL_GPIO_Init+0x304>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	4909      	ldr	r1, [pc, #36]	@ (8001f4c <HAL_GPIO_Init+0x304>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f47f ae8e 	bne.w	8001c5c <HAL_GPIO_Init+0x14>
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	372c      	adds	r7, #44	@ 0x2c
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40010400 	.word	0x40010400

08001f50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e001      	b.n	8001f72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr

08001f7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	807b      	strh	r3, [r7, #2]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f8e:	787b      	ldrb	r3, [r7, #1]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f94:	887a      	ldrh	r2, [r7, #2]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f9a:	e003      	b.n	8001fa4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f9c:	887b      	ldrh	r3, [r7, #2]
 8001f9e:	041a      	lsls	r2, r3, #16
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	611a      	str	r2, [r3, #16]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fc0:	887a      	ldrh	r2, [r7, #2]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	041a      	lsls	r2, r3, #16
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	400b      	ands	r3, r1
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	611a      	str	r2, [r3, #16]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e12b      	b.n	800224a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fa18 	bl	800143c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	@ 0x24
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002032:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002042:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002044:	f001 f832 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8002048:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4a81      	ldr	r2, [pc, #516]	@ (8002254 <HAL_I2C_Init+0x274>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d807      	bhi.n	8002064 <HAL_I2C_Init+0x84>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4a80      	ldr	r2, [pc, #512]	@ (8002258 <HAL_I2C_Init+0x278>)
 8002058:	4293      	cmp	r3, r2
 800205a:	bf94      	ite	ls
 800205c:	2301      	movls	r3, #1
 800205e:	2300      	movhi	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e006      	b.n	8002072 <HAL_I2C_Init+0x92>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4a7d      	ldr	r2, [pc, #500]	@ (800225c <HAL_I2C_Init+0x27c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	bf94      	ite	ls
 800206c:	2301      	movls	r3, #1
 800206e:	2300      	movhi	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0e7      	b.n	800224a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a78      	ldr	r2, [pc, #480]	@ (8002260 <HAL_I2C_Init+0x280>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0c9b      	lsrs	r3, r3, #18
 8002084:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002254 <HAL_I2C_Init+0x274>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d802      	bhi.n	80020b4 <HAL_I2C_Init+0xd4>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	3301      	adds	r3, #1
 80020b2:	e009      	b.n	80020c8 <HAL_I2C_Init+0xe8>
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	4a69      	ldr	r2, [pc, #420]	@ (8002264 <HAL_I2C_Init+0x284>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	099b      	lsrs	r3, r3, #6
 80020c6:	3301      	adds	r3, #1
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	495c      	ldr	r1, [pc, #368]	@ (8002254 <HAL_I2C_Init+0x274>)
 80020e4:	428b      	cmp	r3, r1
 80020e6:	d819      	bhi.n	800211c <HAL_I2C_Init+0x13c>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1e59      	subs	r1, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f6:	1c59      	adds	r1, r3, #1
 80020f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020fc:	400b      	ands	r3, r1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_I2C_Init+0x138>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1e59      	subs	r1, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002110:	3301      	adds	r3, #1
 8002112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002116:	e051      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 8002118:	2304      	movs	r3, #4
 800211a:	e04f      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d111      	bne.n	8002148 <HAL_I2C_Init+0x168>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1e58      	subs	r0, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	440b      	add	r3, r1
 8002132:	fbb0 f3f3 	udiv	r3, r0, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e012      	b.n	800216e <HAL_I2C_Init+0x18e>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1e58      	subs	r0, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	0099      	lsls	r1, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	fbb0 f3f3 	udiv	r3, r0, r3
 800215e:	3301      	adds	r3, #1
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_I2C_Init+0x196>
 8002172:	2301      	movs	r3, #1
 8002174:	e022      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10e      	bne.n	800219c <HAL_I2C_Init+0x1bc>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1e58      	subs	r0, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6859      	ldr	r1, [r3, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	440b      	add	r3, r1
 800218c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002190:	3301      	adds	r3, #1
 8002192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800219a:	e00f      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1e58      	subs	r0, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	0099      	lsls	r1, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b2:	3301      	adds	r3, #1
 80021b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	6809      	ldr	r1, [r1, #0]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6911      	ldr	r1, [r2, #16]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68d2      	ldr	r2, [r2, #12]
 80021f6:	4311      	orrs	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	000186a0 	.word	0x000186a0
 8002258:	001e847f 	.word	0x001e847f
 800225c:	003d08ff 	.word	0x003d08ff
 8002260:	431bde83 	.word	0x431bde83
 8002264:	10624dd3 	.word	0x10624dd3

08002268 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	461a      	mov	r2, r3
 8002274:	460b      	mov	r3, r1
 8002276:	817b      	strh	r3, [r7, #10]
 8002278:	4613      	mov	r3, r2
 800227a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff fba8 	bl	80019d0 <HAL_GetTick>
 8002280:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b20      	cmp	r3, #32
 800228c:	f040 80e0 	bne.w	8002450 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2319      	movs	r3, #25
 8002296:	2201      	movs	r2, #1
 8002298:	4970      	ldr	r1, [pc, #448]	@ (800245c <HAL_I2C_Master_Transmit+0x1f4>)
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f964 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022a6:	2302      	movs	r3, #2
 80022a8:	e0d3      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_I2C_Master_Transmit+0x50>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e0cc      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d007      	beq.n	80022de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2221      	movs	r2, #33	@ 0x21
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2210      	movs	r2, #16
 80022fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	893a      	ldrh	r2, [r7, #8]
 800230e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4a50      	ldr	r2, [pc, #320]	@ (8002460 <HAL_I2C_Master_Transmit+0x1f8>)
 800231e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002320:	8979      	ldrh	r1, [r7, #10]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	6a3a      	ldr	r2, [r7, #32]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f89c 	bl	8002464 <I2C_MasterRequestWrite>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e08d      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800234c:	e066      	b.n	800241c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	6a39      	ldr	r1, [r7, #32]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 fa22 	bl	800279c <I2C_WaitOnTXEFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00d      	beq.n	800237a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	2b04      	cmp	r3, #4
 8002364:	d107      	bne.n	8002376 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002374:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06b      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	781a      	ldrb	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d11b      	bne.n	80023f0 <HAL_I2C_Master_Transmit+0x188>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d017      	beq.n	80023f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	6a39      	ldr	r1, [r7, #32]
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fa19 	bl	800282c <I2C_WaitOnBTFFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00d      	beq.n	800241c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	2b04      	cmp	r3, #4
 8002406:	d107      	bne.n	8002418 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002416:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e01a      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002420:	2b00      	cmp	r3, #0
 8002422:	d194      	bne.n	800234e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
  }
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	00100002 	.word	0x00100002
 8002460:	ffff0000 	.word	0xffff0000

08002464 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af02      	add	r7, sp, #8
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	460b      	mov	r3, r1
 8002472:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002478:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2b08      	cmp	r3, #8
 800247e:	d006      	beq.n	800248e <I2C_MasterRequestWrite+0x2a>
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d003      	beq.n	800248e <I2C_MasterRequestWrite+0x2a>
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800248c:	d108      	bne.n	80024a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	e00b      	b.n	80024b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a4:	2b12      	cmp	r3, #18
 80024a6:	d107      	bne.n	80024b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f84f 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00d      	beq.n	80024ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024de:	d103      	bne.n	80024e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e035      	b.n	8002558 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024f4:	d108      	bne.n	8002508 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024f6:	897b      	ldrh	r3, [r7, #10]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002504:	611a      	str	r2, [r3, #16]
 8002506:	e01b      	b.n	8002540 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002508:	897b      	ldrh	r3, [r7, #10]
 800250a:	11db      	asrs	r3, r3, #7
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f003 0306 	and.w	r3, r3, #6
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f063 030f 	orn	r3, r3, #15
 8002518:	b2da      	uxtb	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	490e      	ldr	r1, [pc, #56]	@ (8002560 <I2C_MasterRequestWrite+0xfc>)
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f898 	bl	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e010      	b.n	8002558 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002536:	897b      	ldrh	r3, [r7, #10]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	4907      	ldr	r1, [pc, #28]	@ (8002564 <I2C_MasterRequestWrite+0x100>)
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f888 	bl	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	00010008 	.word	0x00010008
 8002564:	00010002 	.word	0x00010002

08002568 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002578:	e048      	b.n	800260c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d044      	beq.n	800260c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002582:	f7ff fa25 	bl	80019d0 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d302      	bcc.n	8002598 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d139      	bne.n	800260c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	0c1b      	lsrs	r3, r3, #16
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d10d      	bne.n	80025be <I2C_WaitOnFlagUntilTimeout+0x56>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	43da      	mvns	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4013      	ands	r3, r2
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	e00c      	b.n	80025d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	43da      	mvns	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	4013      	ands	r3, r2
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d116      	bne.n	800260c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e023      	b.n	8002654 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	0c1b      	lsrs	r3, r3, #16
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d10d      	bne.n	8002632 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	43da      	mvns	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	4013      	ands	r3, r2
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	e00c      	b.n	800264c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	43da      	mvns	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	4013      	ands	r3, r2
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	429a      	cmp	r2, r3
 8002650:	d093      	beq.n	800257a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800266a:	e071      	b.n	8002750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800267a:	d123      	bne.n	80026c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800268a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002694:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	f043 0204 	orr.w	r2, r3, #4
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e067      	b.n	8002794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ca:	d041      	beq.n	8002750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026cc:	f7ff f980 	bl	80019d0 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d302      	bcc.n	80026e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d136      	bne.n	8002750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d10c      	bne.n	8002706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4013      	ands	r3, r2
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf14      	ite	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	2300      	moveq	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	e00b      	b.n	800271e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	43da      	mvns	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	4013      	ands	r3, r2
 8002712:	b29b      	uxth	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf14      	ite	ne
 8002718:	2301      	movne	r3, #1
 800271a:	2300      	moveq	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d016      	beq.n	8002750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	f043 0220 	orr.w	r2, r3, #32
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e021      	b.n	8002794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	0c1b      	lsrs	r3, r3, #16
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d10c      	bne.n	8002774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	43da      	mvns	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	4013      	ands	r3, r2
 8002766:	b29b      	uxth	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf14      	ite	ne
 800276c:	2301      	movne	r3, #1
 800276e:	2300      	moveq	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	e00b      	b.n	800278c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	43da      	mvns	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4013      	ands	r3, r2
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	bf14      	ite	ne
 8002786:	2301      	movne	r3, #1
 8002788:	2300      	moveq	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	f47f af6d 	bne.w	800266c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027a8:	e034      	b.n	8002814 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f886 	bl	80028bc <I2C_IsAcknowledgeFailed>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e034      	b.n	8002824 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c0:	d028      	beq.n	8002814 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c2:	f7ff f905 	bl	80019d0 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d302      	bcc.n	80027d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d11d      	bne.n	8002814 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e2:	2b80      	cmp	r3, #128	@ 0x80
 80027e4:	d016      	beq.n	8002814 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	f043 0220 	orr.w	r2, r3, #32
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e007      	b.n	8002824 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281e:	2b80      	cmp	r3, #128	@ 0x80
 8002820:	d1c3      	bne.n	80027aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002838:	e034      	b.n	80028a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f83e 	bl	80028bc <I2C_IsAcknowledgeFailed>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e034      	b.n	80028b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d028      	beq.n	80028a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002852:	f7ff f8bd 	bl	80019d0 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	429a      	cmp	r2, r3
 8002860:	d302      	bcc.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d11d      	bne.n	80028a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b04      	cmp	r3, #4
 8002874:	d016      	beq.n	80028a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e007      	b.n	80028b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d1c3      	bne.n	800283a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d2:	d11b      	bne.n	800290c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	f043 0204 	orr.w	r2, r3, #4
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e272      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8087 	beq.w	8002a46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002938:	4b92      	ldr	r3, [pc, #584]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	2b04      	cmp	r3, #4
 8002942:	d00c      	beq.n	800295e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002944:	4b8f      	ldr	r3, [pc, #572]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b08      	cmp	r3, #8
 800294e:	d112      	bne.n	8002976 <HAL_RCC_OscConfig+0x5e>
 8002950:	4b8c      	ldr	r3, [pc, #560]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800295c:	d10b      	bne.n	8002976 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295e:	4b89      	ldr	r3, [pc, #548]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d06c      	beq.n	8002a44 <HAL_RCC_OscConfig+0x12c>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d168      	bne.n	8002a44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e24c      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x76>
 8002980:	4b80      	ldr	r3, [pc, #512]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a7f      	ldr	r2, [pc, #508]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	e02e      	b.n	80029ec <HAL_RCC_OscConfig+0xd4>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x98>
 8002996:	4b7b      	ldr	r3, [pc, #492]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a7a      	ldr	r2, [pc, #488]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 800299c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	4b78      	ldr	r3, [pc, #480]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a77      	ldr	r2, [pc, #476]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	e01d      	b.n	80029ec <HAL_RCC_OscConfig+0xd4>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0xbc>
 80029ba:	4b72      	ldr	r3, [pc, #456]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a71      	ldr	r2, [pc, #452]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e00b      	b.n	80029ec <HAL_RCC_OscConfig+0xd4>
 80029d4:	4b6b      	ldr	r3, [pc, #428]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b68      	ldr	r3, [pc, #416]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a67      	ldr	r2, [pc, #412]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d013      	beq.n	8002a1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe ffec 	bl	80019d0 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fc:	f7fe ffe8 	bl	80019d0 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	@ 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e200      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0xe4>
 8002a1a:	e014      	b.n	8002a46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe ffd8 	bl	80019d0 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a24:	f7fe ffd4 	bl	80019d0 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	@ 0x64
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e1ec      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a36:	4b53      	ldr	r3, [pc, #332]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x10c>
 8002a42:	e000      	b.n	8002a46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d063      	beq.n	8002b1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a52:	4b4c      	ldr	r3, [pc, #304]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00b      	beq.n	8002a76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a5e:	4b49      	ldr	r3, [pc, #292]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d11c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x18c>
 8002a6a:	4b46      	ldr	r3, [pc, #280]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d116      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a76:	4b43      	ldr	r3, [pc, #268]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <HAL_RCC_OscConfig+0x176>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d001      	beq.n	8002a8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e1c0      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4939      	ldr	r1, [pc, #228]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa2:	e03a      	b.n	8002b1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d020      	beq.n	8002aee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aac:	4b36      	ldr	r3, [pc, #216]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab2:	f7fe ff8d 	bl	80019d0 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aba:	f7fe ff89 	bl	80019d0 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e1a1      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002acc:	4b2d      	ldr	r3, [pc, #180]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4927      	ldr	r1, [pc, #156]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]
 8002aec:	e015      	b.n	8002b1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aee:	4b26      	ldr	r3, [pc, #152]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7fe ff6c 	bl	80019d0 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002afc:	f7fe ff68 	bl	80019d0 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e180      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d03a      	beq.n	8002b9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d019      	beq.n	8002b62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2e:	4b17      	ldr	r3, [pc, #92]	@ (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b34:	f7fe ff4c 	bl	80019d0 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3c:	f7fe ff48 	bl	80019d0 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e160      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	f000 faba 	bl	80030d4 <RCC_Delay>
 8002b60:	e01c      	b.n	8002b9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b62:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b68:	f7fe ff32 	bl	80019d0 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6e:	e00f      	b.n	8002b90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b70:	f7fe ff2e 	bl	80019d0 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d908      	bls.n	8002b90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e146      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	42420000 	.word	0x42420000
 8002b8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b90:	4b92      	ldr	r3, [pc, #584]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e9      	bne.n	8002b70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80a6 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bae:	4b8b      	ldr	r3, [pc, #556]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10d      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	4b88      	ldr	r3, [pc, #544]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	4a87      	ldr	r2, [pc, #540]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bc4:	61d3      	str	r3, [r2, #28]
 8002bc6:	4b85      	ldr	r3, [pc, #532]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd6:	4b82      	ldr	r3, [pc, #520]	@ (8002de0 <HAL_RCC_OscConfig+0x4c8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d118      	bne.n	8002c14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be2:	4b7f      	ldr	r3, [pc, #508]	@ (8002de0 <HAL_RCC_OscConfig+0x4c8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a7e      	ldr	r2, [pc, #504]	@ (8002de0 <HAL_RCC_OscConfig+0x4c8>)
 8002be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bee:	f7fe feef 	bl	80019d0 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf6:	f7fe feeb 	bl	80019d0 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b64      	cmp	r3, #100	@ 0x64
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e103      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	4b75      	ldr	r3, [pc, #468]	@ (8002de0 <HAL_RCC_OscConfig+0x4c8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x312>
 8002c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	4a6e      	ldr	r2, [pc, #440]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6213      	str	r3, [r2, #32]
 8002c28:	e02d      	b.n	8002c86 <HAL_RCC_OscConfig+0x36e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x334>
 8002c32:	4b6a      	ldr	r3, [pc, #424]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	4a69      	ldr	r2, [pc, #420]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	6213      	str	r3, [r2, #32]
 8002c3e:	4b67      	ldr	r3, [pc, #412]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4a66      	ldr	r2, [pc, #408]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	f023 0304 	bic.w	r3, r3, #4
 8002c48:	6213      	str	r3, [r2, #32]
 8002c4a:	e01c      	b.n	8002c86 <HAL_RCC_OscConfig+0x36e>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	d10c      	bne.n	8002c6e <HAL_RCC_OscConfig+0x356>
 8002c54:	4b61      	ldr	r3, [pc, #388]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	4a60      	ldr	r2, [pc, #384]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	f043 0304 	orr.w	r3, r3, #4
 8002c5e:	6213      	str	r3, [r2, #32]
 8002c60:	4b5e      	ldr	r3, [pc, #376]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4a5d      	ldr	r2, [pc, #372]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6213      	str	r3, [r2, #32]
 8002c6c:	e00b      	b.n	8002c86 <HAL_RCC_OscConfig+0x36e>
 8002c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	4a5a      	ldr	r2, [pc, #360]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6213      	str	r3, [r2, #32]
 8002c7a:	4b58      	ldr	r3, [pc, #352]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4a57      	ldr	r2, [pc, #348]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	f023 0304 	bic.w	r3, r3, #4
 8002c84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d015      	beq.n	8002cba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fe9f 	bl	80019d0 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c94:	e00a      	b.n	8002cac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7fe fe9b 	bl	80019d0 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e0b1      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cac:	4b4b      	ldr	r3, [pc, #300]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ee      	beq.n	8002c96 <HAL_RCC_OscConfig+0x37e>
 8002cb8:	e014      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cba:	f7fe fe89 	bl	80019d0 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7fe fe85 	bl	80019d0 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e09b      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd8:	4b40      	ldr	r3, [pc, #256]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1ee      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d105      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cea:	4b3c      	ldr	r3, [pc, #240]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	4a3b      	ldr	r2, [pc, #236]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8087 	beq.w	8002e0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d00:	4b36      	ldr	r3, [pc, #216]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d061      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d146      	bne.n	8002da2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d14:	4b33      	ldr	r3, [pc, #204]	@ (8002de4 <HAL_RCC_OscConfig+0x4cc>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1a:	f7fe fe59 	bl	80019d0 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d22:	f7fe fe55 	bl	80019d0 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e06d      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d34:	4b29      	ldr	r3, [pc, #164]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1f0      	bne.n	8002d22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d48:	d108      	bne.n	8002d5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d4a:	4b24      	ldr	r3, [pc, #144]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	4921      	ldr	r1, [pc, #132]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a19      	ldr	r1, [r3, #32]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	491b      	ldr	r1, [pc, #108]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d74:	4b1b      	ldr	r3, [pc, #108]	@ (8002de4 <HAL_RCC_OscConfig+0x4cc>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7a:	f7fe fe29 	bl	80019d0 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d82:	f7fe fe25 	bl	80019d0 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e03d      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d94:	4b11      	ldr	r3, [pc, #68]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x46a>
 8002da0:	e035      	b.n	8002e0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da2:	4b10      	ldr	r3, [pc, #64]	@ (8002de4 <HAL_RCC_OscConfig+0x4cc>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fe12 	bl	80019d0 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe fe0e 	bl	80019d0 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e026      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc2:	4b06      	ldr	r3, [pc, #24]	@ (8002ddc <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x498>
 8002dce:	e01e      	b.n	8002e0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e019      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40007000 	.word	0x40007000
 8002de4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <HAL_RCC_OscConfig+0x500>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d106      	bne.n	8002e0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000

08002e1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0d0      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e30:	4b6a      	ldr	r3, [pc, #424]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d910      	bls.n	8002e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3e:	4b67      	ldr	r3, [pc, #412]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 0207 	bic.w	r2, r3, #7
 8002e46:	4965      	ldr	r1, [pc, #404]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b63      	ldr	r3, [pc, #396]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0b8      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e78:	4b59      	ldr	r3, [pc, #356]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a58      	ldr	r2, [pc, #352]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e90:	4b53      	ldr	r3, [pc, #332]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4a52      	ldr	r2, [pc, #328]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002e9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e9c:	4b50      	ldr	r3, [pc, #320]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	494d      	ldr	r1, [pc, #308]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d040      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec2:	4b47      	ldr	r3, [pc, #284]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d115      	bne.n	8002efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e07f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eda:	4b41      	ldr	r3, [pc, #260]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e073      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eea:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e06b      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002efa:	4b39      	ldr	r3, [pc, #228]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f023 0203 	bic.w	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4936      	ldr	r1, [pc, #216]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f0c:	f7fe fd60 	bl	80019d0 <HAL_GetTick>
 8002f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f14:	f7fe fd5c 	bl	80019d0 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e053      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 020c 	and.w	r2, r3, #12
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d1eb      	bne.n	8002f14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b27      	ldr	r3, [pc, #156]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d210      	bcs.n	8002f6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b24      	ldr	r3, [pc, #144]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 0207 	bic.w	r2, r3, #7
 8002f52:	4922      	ldr	r1, [pc, #136]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b20      	ldr	r3, [pc, #128]	@ (8002fdc <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e032      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f78:	4b19      	ldr	r3, [pc, #100]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4916      	ldr	r1, [pc, #88]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f96:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	490e      	ldr	r1, [pc, #56]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002faa:	f000 f821 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	490a      	ldr	r1, [pc, #40]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbc:	5ccb      	ldrb	r3, [r1, r3]
 8002fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc2:	4a09      	ldr	r2, [pc, #36]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1cc>)
 8002fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fc6:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <HAL_RCC_ClockConfig+0x1d0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe fcbe 	bl	800194c <HAL_InitTick>

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40022000 	.word	0x40022000
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	08004318 	.word	0x08004318
 8002fe8:	2000002c 	.word	0x2000002c
 8002fec:	20000030 	.word	0x20000030

08002ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	2300      	movs	r3, #0
 8003004:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800300a:	4b1e      	ldr	r3, [pc, #120]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x94>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b04      	cmp	r3, #4
 8003018:	d002      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x30>
 800301a:	2b08      	cmp	r3, #8
 800301c:	d003      	beq.n	8003026 <HAL_RCC_GetSysClockFreq+0x36>
 800301e:	e027      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003020:	4b19      	ldr	r3, [pc, #100]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x98>)
 8003022:	613b      	str	r3, [r7, #16]
      break;
 8003024:	e027      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	0c9b      	lsrs	r3, r3, #18
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	4a17      	ldr	r2, [pc, #92]	@ (800308c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003030:	5cd3      	ldrb	r3, [r2, r3]
 8003032:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d010      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800303e:	4b11      	ldr	r3, [pc, #68]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x94>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	0c5b      	lsrs	r3, r3, #17
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	4a11      	ldr	r2, [pc, #68]	@ (8003090 <HAL_RCC_GetSysClockFreq+0xa0>)
 800304a:	5cd3      	ldrb	r3, [r2, r3]
 800304c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a0d      	ldr	r2, [pc, #52]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x98>)
 8003052:	fb03 f202 	mul.w	r2, r3, r2
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	e004      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a0c      	ldr	r2, [pc, #48]	@ (8003094 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003064:	fb02 f303 	mul.w	r3, r2, r3
 8003068:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	613b      	str	r3, [r7, #16]
      break;
 800306e:	e002      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003070:	4b05      	ldr	r3, [pc, #20]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x98>)
 8003072:	613b      	str	r3, [r7, #16]
      break;
 8003074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003076:	693b      	ldr	r3, [r7, #16]
}
 8003078:	4618      	mov	r0, r3
 800307a:	371c      	adds	r7, #28
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	007a1200 	.word	0x007a1200
 800308c:	08004330 	.word	0x08004330
 8003090:	08004340 	.word	0x08004340
 8003094:	003d0900 	.word	0x003d0900

08003098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800309c:	4b02      	ldr	r3, [pc, #8]	@ (80030a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800309e:	681b      	ldr	r3, [r3, #0]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr
 80030a8:	2000002c 	.word	0x2000002c

080030ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030b0:	f7ff fff2 	bl	8003098 <HAL_RCC_GetHCLKFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	4903      	ldr	r1, [pc, #12]	@ (80030d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000
 80030d0:	08004328 	.word	0x08004328

080030d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003108 <RCC_Delay+0x34>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0a      	ldr	r2, [pc, #40]	@ (800310c <RCC_Delay+0x38>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	0a5b      	lsrs	r3, r3, #9
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	fb02 f303 	mul.w	r3, r2, r3
 80030ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030f0:	bf00      	nop
  }
  while (Delay --);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1e5a      	subs	r2, r3, #1
 80030f6:	60fa      	str	r2, [r7, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f9      	bne.n	80030f0 <RCC_Delay+0x1c>
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	2000002c 	.word	0x2000002c
 800310c:	10624dd3 	.word	0x10624dd3

08003110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e041      	b.n	80031a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fe f9d0 	bl	80014dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f000 fa5c 	bl	800360c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d001      	beq.n	80031c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e03a      	b.n	800323e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a18      	ldr	r2, [pc, #96]	@ (8003248 <HAL_TIM_Base_Start_IT+0x98>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00e      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x58>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f2:	d009      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x58>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a14      	ldr	r2, [pc, #80]	@ (800324c <HAL_TIM_Base_Start_IT+0x9c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d004      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x58>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a13      	ldr	r2, [pc, #76]	@ (8003250 <HAL_TIM_Base_Start_IT+0xa0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d111      	bne.n	800322c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b06      	cmp	r3, #6
 8003218:	d010      	beq.n	800323c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322a:	e007      	b.n	800323c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	40012c00 	.word	0x40012c00
 800324c:	40000400 	.word	0x40000400
 8003250:	40000800 	.word	0x40000800

08003254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d020      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01b      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0202 	mvn.w	r2, #2
 8003288:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f998 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
 80032a4:	e005      	b.n	80032b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f98b 	bl	80035c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f99a 	bl	80035e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d020      	beq.n	8003304 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01b      	beq.n	8003304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0204 	mvn.w	r2, #4
 80032d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f972 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
 80032f0:	e005      	b.n	80032fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f965 	bl	80035c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f974 	bl	80035e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d020      	beq.n	8003350 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01b      	beq.n	8003350 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0208 	mvn.w	r2, #8
 8003320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2204      	movs	r2, #4
 8003326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f94c 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
 800333c:	e005      	b.n	800334a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f93f 	bl	80035c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f94e 	bl	80035e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	d020      	beq.n	800339c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	d01b      	beq.n	800339c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0210 	mvn.w	r2, #16
 800336c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2208      	movs	r2, #8
 8003372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f926 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
 8003388:	e005      	b.n	8003396 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f919 	bl	80035c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f928 	bl	80035e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00c      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d007      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0201 	mvn.w	r2, #1
 80033b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd fff8 	bl	80013b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00c      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d007      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa7f 	bl	80038e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00c      	beq.n	8003408 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d007      	beq.n	8003408 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f8f8 	bl	80035f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00c      	beq.n	800342c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d007      	beq.n	800342c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0220 	mvn.w	r2, #32
 8003424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fa52 	bl	80038d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_TIM_ConfigClockSource+0x1c>
 800344c:	2302      	movs	r3, #2
 800344e:	e0b4      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x186>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800346e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003488:	d03e      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0xd4>
 800348a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800348e:	f200 8087 	bhi.w	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003496:	f000 8086 	beq.w	80035a6 <HAL_TIM_ConfigClockSource+0x172>
 800349a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800349e:	d87f      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034a0:	2b70      	cmp	r3, #112	@ 0x70
 80034a2:	d01a      	beq.n	80034da <HAL_TIM_ConfigClockSource+0xa6>
 80034a4:	2b70      	cmp	r3, #112	@ 0x70
 80034a6:	d87b      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034a8:	2b60      	cmp	r3, #96	@ 0x60
 80034aa:	d050      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x11a>
 80034ac:	2b60      	cmp	r3, #96	@ 0x60
 80034ae:	d877      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034b0:	2b50      	cmp	r3, #80	@ 0x50
 80034b2:	d03c      	beq.n	800352e <HAL_TIM_ConfigClockSource+0xfa>
 80034b4:	2b50      	cmp	r3, #80	@ 0x50
 80034b6:	d873      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034b8:	2b40      	cmp	r3, #64	@ 0x40
 80034ba:	d058      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x13a>
 80034bc:	2b40      	cmp	r3, #64	@ 0x40
 80034be:	d86f      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c0:	2b30      	cmp	r3, #48	@ 0x30
 80034c2:	d064      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15a>
 80034c4:	2b30      	cmp	r3, #48	@ 0x30
 80034c6:	d86b      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d060      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15a>
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d867      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d05c      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15a>
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d05a      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15a>
 80034d8:	e062      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ea:	f000 f974 	bl	80037d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	609a      	str	r2, [r3, #8]
      break;
 8003506:	e04f      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003518:	f000 f95d 	bl	80037d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800352a:	609a      	str	r2, [r3, #8]
      break;
 800352c:	e03c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800353a:	461a      	mov	r2, r3
 800353c:	f000 f8d4 	bl	80036e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2150      	movs	r1, #80	@ 0x50
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f92b 	bl	80037a2 <TIM_ITRx_SetConfig>
      break;
 800354c:	e02c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800355a:	461a      	mov	r2, r3
 800355c:	f000 f8f2 	bl	8003744 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2160      	movs	r1, #96	@ 0x60
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f91b 	bl	80037a2 <TIM_ITRx_SetConfig>
      break;
 800356c:	e01c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800357a:	461a      	mov	r2, r3
 800357c:	f000 f8b4 	bl	80036e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2140      	movs	r1, #64	@ 0x40
 8003586:	4618      	mov	r0, r3
 8003588:	f000 f90b 	bl	80037a2 <TIM_ITRx_SetConfig>
      break;
 800358c:	e00c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4619      	mov	r1, r3
 8003598:	4610      	mov	r0, r2
 800359a:	f000 f902 	bl	80037a2 <TIM_ITRx_SetConfig>
      break;
 800359e:	e003      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      break;
 80035a4:	e000      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr
	...

0800360c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a2f      	ldr	r2, [pc, #188]	@ (80036dc <TIM_Base_SetConfig+0xd0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00b      	beq.n	800363c <TIM_Base_SetConfig+0x30>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362a:	d007      	beq.n	800363c <TIM_Base_SetConfig+0x30>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a2c      	ldr	r2, [pc, #176]	@ (80036e0 <TIM_Base_SetConfig+0xd4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <TIM_Base_SetConfig+0x30>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a2b      	ldr	r2, [pc, #172]	@ (80036e4 <TIM_Base_SetConfig+0xd8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d108      	bne.n	800364e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a22      	ldr	r2, [pc, #136]	@ (80036dc <TIM_Base_SetConfig+0xd0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00b      	beq.n	800366e <TIM_Base_SetConfig+0x62>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800365c:	d007      	beq.n	800366e <TIM_Base_SetConfig+0x62>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a1f      	ldr	r2, [pc, #124]	@ (80036e0 <TIM_Base_SetConfig+0xd4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d003      	beq.n	800366e <TIM_Base_SetConfig+0x62>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a1e      	ldr	r2, [pc, #120]	@ (80036e4 <TIM_Base_SetConfig+0xd8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d108      	bne.n	8003680 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4313      	orrs	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a0d      	ldr	r2, [pc, #52]	@ (80036dc <TIM_Base_SetConfig+0xd0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d103      	bne.n	80036b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f023 0201 	bic.w	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	611a      	str	r2, [r3, #16]
  }
}
 80036d2:	bf00      	nop
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40000800 	.word	0x40000800

080036e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f023 0201 	bic.w	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f023 030a 	bic.w	r3, r3, #10
 8003724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f023 0210 	bic.w	r2, r3, #16
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800376e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	031b      	lsls	r3, r3, #12
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003780:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	621a      	str	r2, [r3, #32]
}
 8003798:	bf00      	nop
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	f043 0307 	orr.w	r3, r3, #7
 80037c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	609a      	str	r2, [r3, #8]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b087      	sub	sp, #28
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	021a      	lsls	r2, r3, #8
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	609a      	str	r2, [r3, #8]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003828:	2302      	movs	r3, #2
 800382a:	e046      	b.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003852:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a16      	ldr	r2, [pc, #88]	@ (80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00e      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003878:	d009      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a12      	ldr	r2, [pc, #72]	@ (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a10      	ldr	r2, [pc, #64]	@ (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d10c      	bne.n	80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	4313      	orrs	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800

080038d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <malloc>:
 80038f4:	4b02      	ldr	r3, [pc, #8]	@ (8003900 <malloc+0xc>)
 80038f6:	4601      	mov	r1, r0
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	f000 b82d 	b.w	8003958 <_malloc_r>
 80038fe:	bf00      	nop
 8003900:	20000038 	.word	0x20000038

08003904 <free>:
 8003904:	4b02      	ldr	r3, [pc, #8]	@ (8003910 <free+0xc>)
 8003906:	4601      	mov	r1, r0
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	f000 b915 	b.w	8003b38 <_free_r>
 800390e:	bf00      	nop
 8003910:	20000038 	.word	0x20000038

08003914 <sbrk_aligned>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	4e0f      	ldr	r6, [pc, #60]	@ (8003954 <sbrk_aligned+0x40>)
 8003918:	460c      	mov	r4, r1
 800391a:	6831      	ldr	r1, [r6, #0]
 800391c:	4605      	mov	r5, r0
 800391e:	b911      	cbnz	r1, 8003926 <sbrk_aligned+0x12>
 8003920:	f000 f8ce 	bl	8003ac0 <_sbrk_r>
 8003924:	6030      	str	r0, [r6, #0]
 8003926:	4621      	mov	r1, r4
 8003928:	4628      	mov	r0, r5
 800392a:	f000 f8c9 	bl	8003ac0 <_sbrk_r>
 800392e:	1c43      	adds	r3, r0, #1
 8003930:	d103      	bne.n	800393a <sbrk_aligned+0x26>
 8003932:	f04f 34ff 	mov.w	r4, #4294967295
 8003936:	4620      	mov	r0, r4
 8003938:	bd70      	pop	{r4, r5, r6, pc}
 800393a:	1cc4      	adds	r4, r0, #3
 800393c:	f024 0403 	bic.w	r4, r4, #3
 8003940:	42a0      	cmp	r0, r4
 8003942:	d0f8      	beq.n	8003936 <sbrk_aligned+0x22>
 8003944:	1a21      	subs	r1, r4, r0
 8003946:	4628      	mov	r0, r5
 8003948:	f000 f8ba 	bl	8003ac0 <_sbrk_r>
 800394c:	3001      	adds	r0, #1
 800394e:	d1f2      	bne.n	8003936 <sbrk_aligned+0x22>
 8003950:	e7ef      	b.n	8003932 <sbrk_aligned+0x1e>
 8003952:	bf00      	nop
 8003954:	20000220 	.word	0x20000220

08003958 <_malloc_r>:
 8003958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800395c:	1ccd      	adds	r5, r1, #3
 800395e:	f025 0503 	bic.w	r5, r5, #3
 8003962:	3508      	adds	r5, #8
 8003964:	2d0c      	cmp	r5, #12
 8003966:	bf38      	it	cc
 8003968:	250c      	movcc	r5, #12
 800396a:	2d00      	cmp	r5, #0
 800396c:	4606      	mov	r6, r0
 800396e:	db01      	blt.n	8003974 <_malloc_r+0x1c>
 8003970:	42a9      	cmp	r1, r5
 8003972:	d904      	bls.n	800397e <_malloc_r+0x26>
 8003974:	230c      	movs	r3, #12
 8003976:	6033      	str	r3, [r6, #0]
 8003978:	2000      	movs	r0, #0
 800397a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800397e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a54 <_malloc_r+0xfc>
 8003982:	f000 f869 	bl	8003a58 <__malloc_lock>
 8003986:	f8d8 3000 	ldr.w	r3, [r8]
 800398a:	461c      	mov	r4, r3
 800398c:	bb44      	cbnz	r4, 80039e0 <_malloc_r+0x88>
 800398e:	4629      	mov	r1, r5
 8003990:	4630      	mov	r0, r6
 8003992:	f7ff ffbf 	bl	8003914 <sbrk_aligned>
 8003996:	1c43      	adds	r3, r0, #1
 8003998:	4604      	mov	r4, r0
 800399a:	d158      	bne.n	8003a4e <_malloc_r+0xf6>
 800399c:	f8d8 4000 	ldr.w	r4, [r8]
 80039a0:	4627      	mov	r7, r4
 80039a2:	2f00      	cmp	r7, #0
 80039a4:	d143      	bne.n	8003a2e <_malloc_r+0xd6>
 80039a6:	2c00      	cmp	r4, #0
 80039a8:	d04b      	beq.n	8003a42 <_malloc_r+0xea>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	4639      	mov	r1, r7
 80039ae:	4630      	mov	r0, r6
 80039b0:	eb04 0903 	add.w	r9, r4, r3
 80039b4:	f000 f884 	bl	8003ac0 <_sbrk_r>
 80039b8:	4581      	cmp	r9, r0
 80039ba:	d142      	bne.n	8003a42 <_malloc_r+0xea>
 80039bc:	6821      	ldr	r1, [r4, #0]
 80039be:	4630      	mov	r0, r6
 80039c0:	1a6d      	subs	r5, r5, r1
 80039c2:	4629      	mov	r1, r5
 80039c4:	f7ff ffa6 	bl	8003914 <sbrk_aligned>
 80039c8:	3001      	adds	r0, #1
 80039ca:	d03a      	beq.n	8003a42 <_malloc_r+0xea>
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	442b      	add	r3, r5
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	f8d8 3000 	ldr.w	r3, [r8]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	bb62      	cbnz	r2, 8003a34 <_malloc_r+0xdc>
 80039da:	f8c8 7000 	str.w	r7, [r8]
 80039de:	e00f      	b.n	8003a00 <_malloc_r+0xa8>
 80039e0:	6822      	ldr	r2, [r4, #0]
 80039e2:	1b52      	subs	r2, r2, r5
 80039e4:	d420      	bmi.n	8003a28 <_malloc_r+0xd0>
 80039e6:	2a0b      	cmp	r2, #11
 80039e8:	d917      	bls.n	8003a1a <_malloc_r+0xc2>
 80039ea:	1961      	adds	r1, r4, r5
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	6025      	str	r5, [r4, #0]
 80039f0:	bf18      	it	ne
 80039f2:	6059      	strne	r1, [r3, #4]
 80039f4:	6863      	ldr	r3, [r4, #4]
 80039f6:	bf08      	it	eq
 80039f8:	f8c8 1000 	streq.w	r1, [r8]
 80039fc:	5162      	str	r2, [r4, r5]
 80039fe:	604b      	str	r3, [r1, #4]
 8003a00:	4630      	mov	r0, r6
 8003a02:	f000 f82f 	bl	8003a64 <__malloc_unlock>
 8003a06:	f104 000b 	add.w	r0, r4, #11
 8003a0a:	1d23      	adds	r3, r4, #4
 8003a0c:	f020 0007 	bic.w	r0, r0, #7
 8003a10:	1ac2      	subs	r2, r0, r3
 8003a12:	bf1c      	itt	ne
 8003a14:	1a1b      	subne	r3, r3, r0
 8003a16:	50a3      	strne	r3, [r4, r2]
 8003a18:	e7af      	b.n	800397a <_malloc_r+0x22>
 8003a1a:	6862      	ldr	r2, [r4, #4]
 8003a1c:	42a3      	cmp	r3, r4
 8003a1e:	bf0c      	ite	eq
 8003a20:	f8c8 2000 	streq.w	r2, [r8]
 8003a24:	605a      	strne	r2, [r3, #4]
 8003a26:	e7eb      	b.n	8003a00 <_malloc_r+0xa8>
 8003a28:	4623      	mov	r3, r4
 8003a2a:	6864      	ldr	r4, [r4, #4]
 8003a2c:	e7ae      	b.n	800398c <_malloc_r+0x34>
 8003a2e:	463c      	mov	r4, r7
 8003a30:	687f      	ldr	r7, [r7, #4]
 8003a32:	e7b6      	b.n	80039a2 <_malloc_r+0x4a>
 8003a34:	461a      	mov	r2, r3
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	42a3      	cmp	r3, r4
 8003a3a:	d1fb      	bne.n	8003a34 <_malloc_r+0xdc>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6053      	str	r3, [r2, #4]
 8003a40:	e7de      	b.n	8003a00 <_malloc_r+0xa8>
 8003a42:	230c      	movs	r3, #12
 8003a44:	4630      	mov	r0, r6
 8003a46:	6033      	str	r3, [r6, #0]
 8003a48:	f000 f80c 	bl	8003a64 <__malloc_unlock>
 8003a4c:	e794      	b.n	8003978 <_malloc_r+0x20>
 8003a4e:	6005      	str	r5, [r0, #0]
 8003a50:	e7d6      	b.n	8003a00 <_malloc_r+0xa8>
 8003a52:	bf00      	nop
 8003a54:	20000224 	.word	0x20000224

08003a58 <__malloc_lock>:
 8003a58:	4801      	ldr	r0, [pc, #4]	@ (8003a60 <__malloc_lock+0x8>)
 8003a5a:	f000 b86b 	b.w	8003b34 <__retarget_lock_acquire_recursive>
 8003a5e:	bf00      	nop
 8003a60:	20000364 	.word	0x20000364

08003a64 <__malloc_unlock>:
 8003a64:	4801      	ldr	r0, [pc, #4]	@ (8003a6c <__malloc_unlock+0x8>)
 8003a66:	f000 b866 	b.w	8003b36 <__retarget_lock_release_recursive>
 8003a6a:	bf00      	nop
 8003a6c:	20000364 	.word	0x20000364

08003a70 <siprintf>:
 8003a70:	b40e      	push	{r1, r2, r3}
 8003a72:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003a76:	b500      	push	{lr}
 8003a78:	b09c      	sub	sp, #112	@ 0x70
 8003a7a:	ab1d      	add	r3, sp, #116	@ 0x74
 8003a7c:	9002      	str	r0, [sp, #8]
 8003a7e:	9006      	str	r0, [sp, #24]
 8003a80:	9107      	str	r1, [sp, #28]
 8003a82:	9104      	str	r1, [sp, #16]
 8003a84:	4808      	ldr	r0, [pc, #32]	@ (8003aa8 <siprintf+0x38>)
 8003a86:	4909      	ldr	r1, [pc, #36]	@ (8003aac <siprintf+0x3c>)
 8003a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a8c:	9105      	str	r1, [sp, #20]
 8003a8e:	6800      	ldr	r0, [r0, #0]
 8003a90:	a902      	add	r1, sp, #8
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	f000 f8f4 	bl	8003c80 <_svfiprintf_r>
 8003a98:	2200      	movs	r2, #0
 8003a9a:	9b02      	ldr	r3, [sp, #8]
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	b01c      	add	sp, #112	@ 0x70
 8003aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003aa4:	b003      	add	sp, #12
 8003aa6:	4770      	bx	lr
 8003aa8:	20000038 	.word	0x20000038
 8003aac:	ffff0208 	.word	0xffff0208

08003ab0 <memset>:
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4402      	add	r2, r0
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d100      	bne.n	8003aba <memset+0xa>
 8003ab8:	4770      	bx	lr
 8003aba:	f803 1b01 	strb.w	r1, [r3], #1
 8003abe:	e7f9      	b.n	8003ab4 <memset+0x4>

08003ac0 <_sbrk_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	4d05      	ldr	r5, [pc, #20]	@ (8003adc <_sbrk_r+0x1c>)
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	4608      	mov	r0, r1
 8003aca:	602b      	str	r3, [r5, #0]
 8003acc:	f7fd fd60 	bl	8001590 <_sbrk>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	d102      	bne.n	8003ada <_sbrk_r+0x1a>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	b103      	cbz	r3, 8003ada <_sbrk_r+0x1a>
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
 8003adc:	20000360 	.word	0x20000360

08003ae0 <__errno>:
 8003ae0:	4b01      	ldr	r3, [pc, #4]	@ (8003ae8 <__errno+0x8>)
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20000038 	.word	0x20000038

08003aec <__libc_init_array>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	2600      	movs	r6, #0
 8003af0:	4d0c      	ldr	r5, [pc, #48]	@ (8003b24 <__libc_init_array+0x38>)
 8003af2:	4c0d      	ldr	r4, [pc, #52]	@ (8003b28 <__libc_init_array+0x3c>)
 8003af4:	1b64      	subs	r4, r4, r5
 8003af6:	10a4      	asrs	r4, r4, #2
 8003af8:	42a6      	cmp	r6, r4
 8003afa:	d109      	bne.n	8003b10 <__libc_init_array+0x24>
 8003afc:	f000 fbba 	bl	8004274 <_init>
 8003b00:	2600      	movs	r6, #0
 8003b02:	4d0a      	ldr	r5, [pc, #40]	@ (8003b2c <__libc_init_array+0x40>)
 8003b04:	4c0a      	ldr	r4, [pc, #40]	@ (8003b30 <__libc_init_array+0x44>)
 8003b06:	1b64      	subs	r4, r4, r5
 8003b08:	10a4      	asrs	r4, r4, #2
 8003b0a:	42a6      	cmp	r6, r4
 8003b0c:	d105      	bne.n	8003b1a <__libc_init_array+0x2e>
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}
 8003b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b14:	4798      	blx	r3
 8003b16:	3601      	adds	r6, #1
 8003b18:	e7ee      	b.n	8003af8 <__libc_init_array+0xc>
 8003b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1e:	4798      	blx	r3
 8003b20:	3601      	adds	r6, #1
 8003b22:	e7f2      	b.n	8003b0a <__libc_init_array+0x1e>
 8003b24:	08004378 	.word	0x08004378
 8003b28:	08004378 	.word	0x08004378
 8003b2c:	08004378 	.word	0x08004378
 8003b30:	0800437c 	.word	0x0800437c

08003b34 <__retarget_lock_acquire_recursive>:
 8003b34:	4770      	bx	lr

08003b36 <__retarget_lock_release_recursive>:
 8003b36:	4770      	bx	lr

08003b38 <_free_r>:
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	4605      	mov	r5, r0
 8003b3c:	2900      	cmp	r1, #0
 8003b3e:	d040      	beq.n	8003bc2 <_free_r+0x8a>
 8003b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b44:	1f0c      	subs	r4, r1, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bfb8      	it	lt
 8003b4a:	18e4      	addlt	r4, r4, r3
 8003b4c:	f7ff ff84 	bl	8003a58 <__malloc_lock>
 8003b50:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc4 <_free_r+0x8c>)
 8003b52:	6813      	ldr	r3, [r2, #0]
 8003b54:	b933      	cbnz	r3, 8003b64 <_free_r+0x2c>
 8003b56:	6063      	str	r3, [r4, #4]
 8003b58:	6014      	str	r4, [r2, #0]
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b60:	f7ff bf80 	b.w	8003a64 <__malloc_unlock>
 8003b64:	42a3      	cmp	r3, r4
 8003b66:	d908      	bls.n	8003b7a <_free_r+0x42>
 8003b68:	6820      	ldr	r0, [r4, #0]
 8003b6a:	1821      	adds	r1, r4, r0
 8003b6c:	428b      	cmp	r3, r1
 8003b6e:	bf01      	itttt	eq
 8003b70:	6819      	ldreq	r1, [r3, #0]
 8003b72:	685b      	ldreq	r3, [r3, #4]
 8003b74:	1809      	addeq	r1, r1, r0
 8003b76:	6021      	streq	r1, [r4, #0]
 8003b78:	e7ed      	b.n	8003b56 <_free_r+0x1e>
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	b10b      	cbz	r3, 8003b84 <_free_r+0x4c>
 8003b80:	42a3      	cmp	r3, r4
 8003b82:	d9fa      	bls.n	8003b7a <_free_r+0x42>
 8003b84:	6811      	ldr	r1, [r2, #0]
 8003b86:	1850      	adds	r0, r2, r1
 8003b88:	42a0      	cmp	r0, r4
 8003b8a:	d10b      	bne.n	8003ba4 <_free_r+0x6c>
 8003b8c:	6820      	ldr	r0, [r4, #0]
 8003b8e:	4401      	add	r1, r0
 8003b90:	1850      	adds	r0, r2, r1
 8003b92:	4283      	cmp	r3, r0
 8003b94:	6011      	str	r1, [r2, #0]
 8003b96:	d1e0      	bne.n	8003b5a <_free_r+0x22>
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4408      	add	r0, r1
 8003b9e:	6010      	str	r0, [r2, #0]
 8003ba0:	6053      	str	r3, [r2, #4]
 8003ba2:	e7da      	b.n	8003b5a <_free_r+0x22>
 8003ba4:	d902      	bls.n	8003bac <_free_r+0x74>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	e7d6      	b.n	8003b5a <_free_r+0x22>
 8003bac:	6820      	ldr	r0, [r4, #0]
 8003bae:	1821      	adds	r1, r4, r0
 8003bb0:	428b      	cmp	r3, r1
 8003bb2:	bf01      	itttt	eq
 8003bb4:	6819      	ldreq	r1, [r3, #0]
 8003bb6:	685b      	ldreq	r3, [r3, #4]
 8003bb8:	1809      	addeq	r1, r1, r0
 8003bba:	6021      	streq	r1, [r4, #0]
 8003bbc:	6063      	str	r3, [r4, #4]
 8003bbe:	6054      	str	r4, [r2, #4]
 8003bc0:	e7cb      	b.n	8003b5a <_free_r+0x22>
 8003bc2:	bd38      	pop	{r3, r4, r5, pc}
 8003bc4:	20000224 	.word	0x20000224

08003bc8 <__ssputs_r>:
 8003bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bcc:	461f      	mov	r7, r3
 8003bce:	688e      	ldr	r6, [r1, #8]
 8003bd0:	4682      	mov	sl, r0
 8003bd2:	42be      	cmp	r6, r7
 8003bd4:	460c      	mov	r4, r1
 8003bd6:	4690      	mov	r8, r2
 8003bd8:	680b      	ldr	r3, [r1, #0]
 8003bda:	d82d      	bhi.n	8003c38 <__ssputs_r+0x70>
 8003bdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003be0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003be4:	d026      	beq.n	8003c34 <__ssputs_r+0x6c>
 8003be6:	6965      	ldr	r5, [r4, #20]
 8003be8:	6909      	ldr	r1, [r1, #16]
 8003bea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bee:	eba3 0901 	sub.w	r9, r3, r1
 8003bf2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bf6:	1c7b      	adds	r3, r7, #1
 8003bf8:	444b      	add	r3, r9
 8003bfa:	106d      	asrs	r5, r5, #1
 8003bfc:	429d      	cmp	r5, r3
 8003bfe:	bf38      	it	cc
 8003c00:	461d      	movcc	r5, r3
 8003c02:	0553      	lsls	r3, r2, #21
 8003c04:	d527      	bpl.n	8003c56 <__ssputs_r+0x8e>
 8003c06:	4629      	mov	r1, r5
 8003c08:	f7ff fea6 	bl	8003958 <_malloc_r>
 8003c0c:	4606      	mov	r6, r0
 8003c0e:	b360      	cbz	r0, 8003c6a <__ssputs_r+0xa2>
 8003c10:	464a      	mov	r2, r9
 8003c12:	6921      	ldr	r1, [r4, #16]
 8003c14:	f000 faea 	bl	80041ec <memcpy>
 8003c18:	89a3      	ldrh	r3, [r4, #12]
 8003c1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c22:	81a3      	strh	r3, [r4, #12]
 8003c24:	6126      	str	r6, [r4, #16]
 8003c26:	444e      	add	r6, r9
 8003c28:	6026      	str	r6, [r4, #0]
 8003c2a:	463e      	mov	r6, r7
 8003c2c:	6165      	str	r5, [r4, #20]
 8003c2e:	eba5 0509 	sub.w	r5, r5, r9
 8003c32:	60a5      	str	r5, [r4, #8]
 8003c34:	42be      	cmp	r6, r7
 8003c36:	d900      	bls.n	8003c3a <__ssputs_r+0x72>
 8003c38:	463e      	mov	r6, r7
 8003c3a:	4632      	mov	r2, r6
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	6820      	ldr	r0, [r4, #0]
 8003c40:	f000 faac 	bl	800419c <memmove>
 8003c44:	2000      	movs	r0, #0
 8003c46:	68a3      	ldr	r3, [r4, #8]
 8003c48:	1b9b      	subs	r3, r3, r6
 8003c4a:	60a3      	str	r3, [r4, #8]
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	4433      	add	r3, r6
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c56:	462a      	mov	r2, r5
 8003c58:	f000 fad6 	bl	8004208 <_realloc_r>
 8003c5c:	4606      	mov	r6, r0
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d1e0      	bne.n	8003c24 <__ssputs_r+0x5c>
 8003c62:	4650      	mov	r0, sl
 8003c64:	6921      	ldr	r1, [r4, #16]
 8003c66:	f7ff ff67 	bl	8003b38 <_free_r>
 8003c6a:	230c      	movs	r3, #12
 8003c6c:	f8ca 3000 	str.w	r3, [sl]
 8003c70:	89a3      	ldrh	r3, [r4, #12]
 8003c72:	f04f 30ff 	mov.w	r0, #4294967295
 8003c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c7a:	81a3      	strh	r3, [r4, #12]
 8003c7c:	e7e9      	b.n	8003c52 <__ssputs_r+0x8a>
	...

08003c80 <_svfiprintf_r>:
 8003c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c84:	4698      	mov	r8, r3
 8003c86:	898b      	ldrh	r3, [r1, #12]
 8003c88:	4607      	mov	r7, r0
 8003c8a:	061b      	lsls	r3, r3, #24
 8003c8c:	460d      	mov	r5, r1
 8003c8e:	4614      	mov	r4, r2
 8003c90:	b09d      	sub	sp, #116	@ 0x74
 8003c92:	d510      	bpl.n	8003cb6 <_svfiprintf_r+0x36>
 8003c94:	690b      	ldr	r3, [r1, #16]
 8003c96:	b973      	cbnz	r3, 8003cb6 <_svfiprintf_r+0x36>
 8003c98:	2140      	movs	r1, #64	@ 0x40
 8003c9a:	f7ff fe5d 	bl	8003958 <_malloc_r>
 8003c9e:	6028      	str	r0, [r5, #0]
 8003ca0:	6128      	str	r0, [r5, #16]
 8003ca2:	b930      	cbnz	r0, 8003cb2 <_svfiprintf_r+0x32>
 8003ca4:	230c      	movs	r3, #12
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	b01d      	add	sp, #116	@ 0x74
 8003cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cb2:	2340      	movs	r3, #64	@ 0x40
 8003cb4:	616b      	str	r3, [r5, #20]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cba:	2320      	movs	r3, #32
 8003cbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003cc0:	2330      	movs	r3, #48	@ 0x30
 8003cc2:	f04f 0901 	mov.w	r9, #1
 8003cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003e64 <_svfiprintf_r+0x1e4>
 8003cce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003cd2:	4623      	mov	r3, r4
 8003cd4:	469a      	mov	sl, r3
 8003cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cda:	b10a      	cbz	r2, 8003ce0 <_svfiprintf_r+0x60>
 8003cdc:	2a25      	cmp	r2, #37	@ 0x25
 8003cde:	d1f9      	bne.n	8003cd4 <_svfiprintf_r+0x54>
 8003ce0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ce4:	d00b      	beq.n	8003cfe <_svfiprintf_r+0x7e>
 8003ce6:	465b      	mov	r3, fp
 8003ce8:	4622      	mov	r2, r4
 8003cea:	4629      	mov	r1, r5
 8003cec:	4638      	mov	r0, r7
 8003cee:	f7ff ff6b 	bl	8003bc8 <__ssputs_r>
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	f000 80a7 	beq.w	8003e46 <_svfiprintf_r+0x1c6>
 8003cf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003cfa:	445a      	add	r2, fp
 8003cfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8003cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 809f 	beq.w	8003e46 <_svfiprintf_r+0x1c6>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d12:	f10a 0a01 	add.w	sl, sl, #1
 8003d16:	9304      	str	r3, [sp, #16]
 8003d18:	9307      	str	r3, [sp, #28]
 8003d1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d20:	4654      	mov	r4, sl
 8003d22:	2205      	movs	r2, #5
 8003d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d28:	484e      	ldr	r0, [pc, #312]	@ (8003e64 <_svfiprintf_r+0x1e4>)
 8003d2a:	f000 fa51 	bl	80041d0 <memchr>
 8003d2e:	9a04      	ldr	r2, [sp, #16]
 8003d30:	b9d8      	cbnz	r0, 8003d6a <_svfiprintf_r+0xea>
 8003d32:	06d0      	lsls	r0, r2, #27
 8003d34:	bf44      	itt	mi
 8003d36:	2320      	movmi	r3, #32
 8003d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d3c:	0711      	lsls	r1, r2, #28
 8003d3e:	bf44      	itt	mi
 8003d40:	232b      	movmi	r3, #43	@ 0x2b
 8003d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d46:	f89a 3000 	ldrb.w	r3, [sl]
 8003d4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d4c:	d015      	beq.n	8003d7a <_svfiprintf_r+0xfa>
 8003d4e:	4654      	mov	r4, sl
 8003d50:	2000      	movs	r0, #0
 8003d52:	f04f 0c0a 	mov.w	ip, #10
 8003d56:	9a07      	ldr	r2, [sp, #28]
 8003d58:	4621      	mov	r1, r4
 8003d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d5e:	3b30      	subs	r3, #48	@ 0x30
 8003d60:	2b09      	cmp	r3, #9
 8003d62:	d94b      	bls.n	8003dfc <_svfiprintf_r+0x17c>
 8003d64:	b1b0      	cbz	r0, 8003d94 <_svfiprintf_r+0x114>
 8003d66:	9207      	str	r2, [sp, #28]
 8003d68:	e014      	b.n	8003d94 <_svfiprintf_r+0x114>
 8003d6a:	eba0 0308 	sub.w	r3, r0, r8
 8003d6e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d72:	4313      	orrs	r3, r2
 8003d74:	46a2      	mov	sl, r4
 8003d76:	9304      	str	r3, [sp, #16]
 8003d78:	e7d2      	b.n	8003d20 <_svfiprintf_r+0xa0>
 8003d7a:	9b03      	ldr	r3, [sp, #12]
 8003d7c:	1d19      	adds	r1, r3, #4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	9103      	str	r1, [sp, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	bfbb      	ittet	lt
 8003d86:	425b      	neglt	r3, r3
 8003d88:	f042 0202 	orrlt.w	r2, r2, #2
 8003d8c:	9307      	strge	r3, [sp, #28]
 8003d8e:	9307      	strlt	r3, [sp, #28]
 8003d90:	bfb8      	it	lt
 8003d92:	9204      	strlt	r2, [sp, #16]
 8003d94:	7823      	ldrb	r3, [r4, #0]
 8003d96:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d98:	d10a      	bne.n	8003db0 <_svfiprintf_r+0x130>
 8003d9a:	7863      	ldrb	r3, [r4, #1]
 8003d9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d9e:	d132      	bne.n	8003e06 <_svfiprintf_r+0x186>
 8003da0:	9b03      	ldr	r3, [sp, #12]
 8003da2:	3402      	adds	r4, #2
 8003da4:	1d1a      	adds	r2, r3, #4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	9203      	str	r2, [sp, #12]
 8003daa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003dae:	9305      	str	r3, [sp, #20]
 8003db0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003e68 <_svfiprintf_r+0x1e8>
 8003db4:	2203      	movs	r2, #3
 8003db6:	4650      	mov	r0, sl
 8003db8:	7821      	ldrb	r1, [r4, #0]
 8003dba:	f000 fa09 	bl	80041d0 <memchr>
 8003dbe:	b138      	cbz	r0, 8003dd0 <_svfiprintf_r+0x150>
 8003dc0:	2240      	movs	r2, #64	@ 0x40
 8003dc2:	9b04      	ldr	r3, [sp, #16]
 8003dc4:	eba0 000a 	sub.w	r0, r0, sl
 8003dc8:	4082      	lsls	r2, r0
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	3401      	adds	r4, #1
 8003dce:	9304      	str	r3, [sp, #16]
 8003dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dd4:	2206      	movs	r2, #6
 8003dd6:	4825      	ldr	r0, [pc, #148]	@ (8003e6c <_svfiprintf_r+0x1ec>)
 8003dd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ddc:	f000 f9f8 	bl	80041d0 <memchr>
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d036      	beq.n	8003e52 <_svfiprintf_r+0x1d2>
 8003de4:	4b22      	ldr	r3, [pc, #136]	@ (8003e70 <_svfiprintf_r+0x1f0>)
 8003de6:	bb1b      	cbnz	r3, 8003e30 <_svfiprintf_r+0x1b0>
 8003de8:	9b03      	ldr	r3, [sp, #12]
 8003dea:	3307      	adds	r3, #7
 8003dec:	f023 0307 	bic.w	r3, r3, #7
 8003df0:	3308      	adds	r3, #8
 8003df2:	9303      	str	r3, [sp, #12]
 8003df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003df6:	4433      	add	r3, r6
 8003df8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dfa:	e76a      	b.n	8003cd2 <_svfiprintf_r+0x52>
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	2001      	movs	r0, #1
 8003e00:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e04:	e7a8      	b.n	8003d58 <_svfiprintf_r+0xd8>
 8003e06:	2300      	movs	r3, #0
 8003e08:	f04f 0c0a 	mov.w	ip, #10
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	3401      	adds	r4, #1
 8003e10:	9305      	str	r3, [sp, #20]
 8003e12:	4620      	mov	r0, r4
 8003e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e18:	3a30      	subs	r2, #48	@ 0x30
 8003e1a:	2a09      	cmp	r2, #9
 8003e1c:	d903      	bls.n	8003e26 <_svfiprintf_r+0x1a6>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0c6      	beq.n	8003db0 <_svfiprintf_r+0x130>
 8003e22:	9105      	str	r1, [sp, #20]
 8003e24:	e7c4      	b.n	8003db0 <_svfiprintf_r+0x130>
 8003e26:	4604      	mov	r4, r0
 8003e28:	2301      	movs	r3, #1
 8003e2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e2e:	e7f0      	b.n	8003e12 <_svfiprintf_r+0x192>
 8003e30:	ab03      	add	r3, sp, #12
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	462a      	mov	r2, r5
 8003e36:	4638      	mov	r0, r7
 8003e38:	4b0e      	ldr	r3, [pc, #56]	@ (8003e74 <_svfiprintf_r+0x1f4>)
 8003e3a:	a904      	add	r1, sp, #16
 8003e3c:	f3af 8000 	nop.w
 8003e40:	1c42      	adds	r2, r0, #1
 8003e42:	4606      	mov	r6, r0
 8003e44:	d1d6      	bne.n	8003df4 <_svfiprintf_r+0x174>
 8003e46:	89ab      	ldrh	r3, [r5, #12]
 8003e48:	065b      	lsls	r3, r3, #25
 8003e4a:	f53f af2d 	bmi.w	8003ca8 <_svfiprintf_r+0x28>
 8003e4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e50:	e72c      	b.n	8003cac <_svfiprintf_r+0x2c>
 8003e52:	ab03      	add	r3, sp, #12
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	462a      	mov	r2, r5
 8003e58:	4638      	mov	r0, r7
 8003e5a:	4b06      	ldr	r3, [pc, #24]	@ (8003e74 <_svfiprintf_r+0x1f4>)
 8003e5c:	a904      	add	r1, sp, #16
 8003e5e:	f000 f87d 	bl	8003f5c <_printf_i>
 8003e62:	e7ed      	b.n	8003e40 <_svfiprintf_r+0x1c0>
 8003e64:	08004342 	.word	0x08004342
 8003e68:	08004348 	.word	0x08004348
 8003e6c:	0800434c 	.word	0x0800434c
 8003e70:	00000000 	.word	0x00000000
 8003e74:	08003bc9 	.word	0x08003bc9

08003e78 <_printf_common>:
 8003e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e7c:	4616      	mov	r6, r2
 8003e7e:	4698      	mov	r8, r3
 8003e80:	688a      	ldr	r2, [r1, #8]
 8003e82:	690b      	ldr	r3, [r1, #16]
 8003e84:	4607      	mov	r7, r0
 8003e86:	4293      	cmp	r3, r2
 8003e88:	bfb8      	it	lt
 8003e8a:	4613      	movlt	r3, r2
 8003e8c:	6033      	str	r3, [r6, #0]
 8003e8e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e92:	460c      	mov	r4, r1
 8003e94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e98:	b10a      	cbz	r2, 8003e9e <_printf_common+0x26>
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	6033      	str	r3, [r6, #0]
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	0699      	lsls	r1, r3, #26
 8003ea2:	bf42      	ittt	mi
 8003ea4:	6833      	ldrmi	r3, [r6, #0]
 8003ea6:	3302      	addmi	r3, #2
 8003ea8:	6033      	strmi	r3, [r6, #0]
 8003eaa:	6825      	ldr	r5, [r4, #0]
 8003eac:	f015 0506 	ands.w	r5, r5, #6
 8003eb0:	d106      	bne.n	8003ec0 <_printf_common+0x48>
 8003eb2:	f104 0a19 	add.w	sl, r4, #25
 8003eb6:	68e3      	ldr	r3, [r4, #12]
 8003eb8:	6832      	ldr	r2, [r6, #0]
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	42ab      	cmp	r3, r5
 8003ebe:	dc2b      	bgt.n	8003f18 <_printf_common+0xa0>
 8003ec0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ec4:	6822      	ldr	r2, [r4, #0]
 8003ec6:	3b00      	subs	r3, #0
 8003ec8:	bf18      	it	ne
 8003eca:	2301      	movne	r3, #1
 8003ecc:	0692      	lsls	r2, r2, #26
 8003ece:	d430      	bmi.n	8003f32 <_printf_common+0xba>
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ed8:	47c8      	blx	r9
 8003eda:	3001      	adds	r0, #1
 8003edc:	d023      	beq.n	8003f26 <_printf_common+0xae>
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	6922      	ldr	r2, [r4, #16]
 8003ee2:	f003 0306 	and.w	r3, r3, #6
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	bf14      	ite	ne
 8003eea:	2500      	movne	r5, #0
 8003eec:	6833      	ldreq	r3, [r6, #0]
 8003eee:	f04f 0600 	mov.w	r6, #0
 8003ef2:	bf08      	it	eq
 8003ef4:	68e5      	ldreq	r5, [r4, #12]
 8003ef6:	f104 041a 	add.w	r4, r4, #26
 8003efa:	bf08      	it	eq
 8003efc:	1aed      	subeq	r5, r5, r3
 8003efe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003f02:	bf08      	it	eq
 8003f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	bfc4      	itt	gt
 8003f0c:	1a9b      	subgt	r3, r3, r2
 8003f0e:	18ed      	addgt	r5, r5, r3
 8003f10:	42b5      	cmp	r5, r6
 8003f12:	d11a      	bne.n	8003f4a <_printf_common+0xd2>
 8003f14:	2000      	movs	r0, #0
 8003f16:	e008      	b.n	8003f2a <_printf_common+0xb2>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	4652      	mov	r2, sl
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	4638      	mov	r0, r7
 8003f20:	47c8      	blx	r9
 8003f22:	3001      	adds	r0, #1
 8003f24:	d103      	bne.n	8003f2e <_printf_common+0xb6>
 8003f26:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2e:	3501      	adds	r5, #1
 8003f30:	e7c1      	b.n	8003eb6 <_printf_common+0x3e>
 8003f32:	2030      	movs	r0, #48	@ 0x30
 8003f34:	18e1      	adds	r1, r4, r3
 8003f36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f40:	4422      	add	r2, r4
 8003f42:	3302      	adds	r3, #2
 8003f44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f48:	e7c2      	b.n	8003ed0 <_printf_common+0x58>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	4622      	mov	r2, r4
 8003f4e:	4641      	mov	r1, r8
 8003f50:	4638      	mov	r0, r7
 8003f52:	47c8      	blx	r9
 8003f54:	3001      	adds	r0, #1
 8003f56:	d0e6      	beq.n	8003f26 <_printf_common+0xae>
 8003f58:	3601      	adds	r6, #1
 8003f5a:	e7d9      	b.n	8003f10 <_printf_common+0x98>

08003f5c <_printf_i>:
 8003f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f60:	7e0f      	ldrb	r7, [r1, #24]
 8003f62:	4691      	mov	r9, r2
 8003f64:	2f78      	cmp	r7, #120	@ 0x78
 8003f66:	4680      	mov	r8, r0
 8003f68:	460c      	mov	r4, r1
 8003f6a:	469a      	mov	sl, r3
 8003f6c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f72:	d807      	bhi.n	8003f84 <_printf_i+0x28>
 8003f74:	2f62      	cmp	r7, #98	@ 0x62
 8003f76:	d80a      	bhi.n	8003f8e <_printf_i+0x32>
 8003f78:	2f00      	cmp	r7, #0
 8003f7a:	f000 80d3 	beq.w	8004124 <_printf_i+0x1c8>
 8003f7e:	2f58      	cmp	r7, #88	@ 0x58
 8003f80:	f000 80ba 	beq.w	80040f8 <_printf_i+0x19c>
 8003f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f8c:	e03a      	b.n	8004004 <_printf_i+0xa8>
 8003f8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f92:	2b15      	cmp	r3, #21
 8003f94:	d8f6      	bhi.n	8003f84 <_printf_i+0x28>
 8003f96:	a101      	add	r1, pc, #4	@ (adr r1, 8003f9c <_printf_i+0x40>)
 8003f98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f9c:	08003ff5 	.word	0x08003ff5
 8003fa0:	08004009 	.word	0x08004009
 8003fa4:	08003f85 	.word	0x08003f85
 8003fa8:	08003f85 	.word	0x08003f85
 8003fac:	08003f85 	.word	0x08003f85
 8003fb0:	08003f85 	.word	0x08003f85
 8003fb4:	08004009 	.word	0x08004009
 8003fb8:	08003f85 	.word	0x08003f85
 8003fbc:	08003f85 	.word	0x08003f85
 8003fc0:	08003f85 	.word	0x08003f85
 8003fc4:	08003f85 	.word	0x08003f85
 8003fc8:	0800410b 	.word	0x0800410b
 8003fcc:	08004033 	.word	0x08004033
 8003fd0:	080040c5 	.word	0x080040c5
 8003fd4:	08003f85 	.word	0x08003f85
 8003fd8:	08003f85 	.word	0x08003f85
 8003fdc:	0800412d 	.word	0x0800412d
 8003fe0:	08003f85 	.word	0x08003f85
 8003fe4:	08004033 	.word	0x08004033
 8003fe8:	08003f85 	.word	0x08003f85
 8003fec:	08003f85 	.word	0x08003f85
 8003ff0:	080040cd 	.word	0x080040cd
 8003ff4:	6833      	ldr	r3, [r6, #0]
 8003ff6:	1d1a      	adds	r2, r3, #4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6032      	str	r2, [r6, #0]
 8003ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004000:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004004:	2301      	movs	r3, #1
 8004006:	e09e      	b.n	8004146 <_printf_i+0x1ea>
 8004008:	6833      	ldr	r3, [r6, #0]
 800400a:	6820      	ldr	r0, [r4, #0]
 800400c:	1d19      	adds	r1, r3, #4
 800400e:	6031      	str	r1, [r6, #0]
 8004010:	0606      	lsls	r6, r0, #24
 8004012:	d501      	bpl.n	8004018 <_printf_i+0xbc>
 8004014:	681d      	ldr	r5, [r3, #0]
 8004016:	e003      	b.n	8004020 <_printf_i+0xc4>
 8004018:	0645      	lsls	r5, r0, #25
 800401a:	d5fb      	bpl.n	8004014 <_printf_i+0xb8>
 800401c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004020:	2d00      	cmp	r5, #0
 8004022:	da03      	bge.n	800402c <_printf_i+0xd0>
 8004024:	232d      	movs	r3, #45	@ 0x2d
 8004026:	426d      	negs	r5, r5
 8004028:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800402c:	230a      	movs	r3, #10
 800402e:	4859      	ldr	r0, [pc, #356]	@ (8004194 <_printf_i+0x238>)
 8004030:	e011      	b.n	8004056 <_printf_i+0xfa>
 8004032:	6821      	ldr	r1, [r4, #0]
 8004034:	6833      	ldr	r3, [r6, #0]
 8004036:	0608      	lsls	r0, r1, #24
 8004038:	f853 5b04 	ldr.w	r5, [r3], #4
 800403c:	d402      	bmi.n	8004044 <_printf_i+0xe8>
 800403e:	0649      	lsls	r1, r1, #25
 8004040:	bf48      	it	mi
 8004042:	b2ad      	uxthmi	r5, r5
 8004044:	2f6f      	cmp	r7, #111	@ 0x6f
 8004046:	6033      	str	r3, [r6, #0]
 8004048:	bf14      	ite	ne
 800404a:	230a      	movne	r3, #10
 800404c:	2308      	moveq	r3, #8
 800404e:	4851      	ldr	r0, [pc, #324]	@ (8004194 <_printf_i+0x238>)
 8004050:	2100      	movs	r1, #0
 8004052:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004056:	6866      	ldr	r6, [r4, #4]
 8004058:	2e00      	cmp	r6, #0
 800405a:	bfa8      	it	ge
 800405c:	6821      	ldrge	r1, [r4, #0]
 800405e:	60a6      	str	r6, [r4, #8]
 8004060:	bfa4      	itt	ge
 8004062:	f021 0104 	bicge.w	r1, r1, #4
 8004066:	6021      	strge	r1, [r4, #0]
 8004068:	b90d      	cbnz	r5, 800406e <_printf_i+0x112>
 800406a:	2e00      	cmp	r6, #0
 800406c:	d04b      	beq.n	8004106 <_printf_i+0x1aa>
 800406e:	4616      	mov	r6, r2
 8004070:	fbb5 f1f3 	udiv	r1, r5, r3
 8004074:	fb03 5711 	mls	r7, r3, r1, r5
 8004078:	5dc7      	ldrb	r7, [r0, r7]
 800407a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800407e:	462f      	mov	r7, r5
 8004080:	42bb      	cmp	r3, r7
 8004082:	460d      	mov	r5, r1
 8004084:	d9f4      	bls.n	8004070 <_printf_i+0x114>
 8004086:	2b08      	cmp	r3, #8
 8004088:	d10b      	bne.n	80040a2 <_printf_i+0x146>
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	07df      	lsls	r7, r3, #31
 800408e:	d508      	bpl.n	80040a2 <_printf_i+0x146>
 8004090:	6923      	ldr	r3, [r4, #16]
 8004092:	6861      	ldr	r1, [r4, #4]
 8004094:	4299      	cmp	r1, r3
 8004096:	bfde      	ittt	le
 8004098:	2330      	movle	r3, #48	@ 0x30
 800409a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800409e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040a2:	1b92      	subs	r2, r2, r6
 80040a4:	6122      	str	r2, [r4, #16]
 80040a6:	464b      	mov	r3, r9
 80040a8:	4621      	mov	r1, r4
 80040aa:	4640      	mov	r0, r8
 80040ac:	f8cd a000 	str.w	sl, [sp]
 80040b0:	aa03      	add	r2, sp, #12
 80040b2:	f7ff fee1 	bl	8003e78 <_printf_common>
 80040b6:	3001      	adds	r0, #1
 80040b8:	d14a      	bne.n	8004150 <_printf_i+0x1f4>
 80040ba:	f04f 30ff 	mov.w	r0, #4294967295
 80040be:	b004      	add	sp, #16
 80040c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	f043 0320 	orr.w	r3, r3, #32
 80040ca:	6023      	str	r3, [r4, #0]
 80040cc:	2778      	movs	r7, #120	@ 0x78
 80040ce:	4832      	ldr	r0, [pc, #200]	@ (8004198 <_printf_i+0x23c>)
 80040d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	6831      	ldr	r1, [r6, #0]
 80040d8:	061f      	lsls	r7, r3, #24
 80040da:	f851 5b04 	ldr.w	r5, [r1], #4
 80040de:	d402      	bmi.n	80040e6 <_printf_i+0x18a>
 80040e0:	065f      	lsls	r7, r3, #25
 80040e2:	bf48      	it	mi
 80040e4:	b2ad      	uxthmi	r5, r5
 80040e6:	6031      	str	r1, [r6, #0]
 80040e8:	07d9      	lsls	r1, r3, #31
 80040ea:	bf44      	itt	mi
 80040ec:	f043 0320 	orrmi.w	r3, r3, #32
 80040f0:	6023      	strmi	r3, [r4, #0]
 80040f2:	b11d      	cbz	r5, 80040fc <_printf_i+0x1a0>
 80040f4:	2310      	movs	r3, #16
 80040f6:	e7ab      	b.n	8004050 <_printf_i+0xf4>
 80040f8:	4826      	ldr	r0, [pc, #152]	@ (8004194 <_printf_i+0x238>)
 80040fa:	e7e9      	b.n	80040d0 <_printf_i+0x174>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	f023 0320 	bic.w	r3, r3, #32
 8004102:	6023      	str	r3, [r4, #0]
 8004104:	e7f6      	b.n	80040f4 <_printf_i+0x198>
 8004106:	4616      	mov	r6, r2
 8004108:	e7bd      	b.n	8004086 <_printf_i+0x12a>
 800410a:	6833      	ldr	r3, [r6, #0]
 800410c:	6825      	ldr	r5, [r4, #0]
 800410e:	1d18      	adds	r0, r3, #4
 8004110:	6961      	ldr	r1, [r4, #20]
 8004112:	6030      	str	r0, [r6, #0]
 8004114:	062e      	lsls	r6, r5, #24
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	d501      	bpl.n	800411e <_printf_i+0x1c2>
 800411a:	6019      	str	r1, [r3, #0]
 800411c:	e002      	b.n	8004124 <_printf_i+0x1c8>
 800411e:	0668      	lsls	r0, r5, #25
 8004120:	d5fb      	bpl.n	800411a <_printf_i+0x1be>
 8004122:	8019      	strh	r1, [r3, #0]
 8004124:	2300      	movs	r3, #0
 8004126:	4616      	mov	r6, r2
 8004128:	6123      	str	r3, [r4, #16]
 800412a:	e7bc      	b.n	80040a6 <_printf_i+0x14a>
 800412c:	6833      	ldr	r3, [r6, #0]
 800412e:	2100      	movs	r1, #0
 8004130:	1d1a      	adds	r2, r3, #4
 8004132:	6032      	str	r2, [r6, #0]
 8004134:	681e      	ldr	r6, [r3, #0]
 8004136:	6862      	ldr	r2, [r4, #4]
 8004138:	4630      	mov	r0, r6
 800413a:	f000 f849 	bl	80041d0 <memchr>
 800413e:	b108      	cbz	r0, 8004144 <_printf_i+0x1e8>
 8004140:	1b80      	subs	r0, r0, r6
 8004142:	6060      	str	r0, [r4, #4]
 8004144:	6863      	ldr	r3, [r4, #4]
 8004146:	6123      	str	r3, [r4, #16]
 8004148:	2300      	movs	r3, #0
 800414a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800414e:	e7aa      	b.n	80040a6 <_printf_i+0x14a>
 8004150:	4632      	mov	r2, r6
 8004152:	4649      	mov	r1, r9
 8004154:	4640      	mov	r0, r8
 8004156:	6923      	ldr	r3, [r4, #16]
 8004158:	47d0      	blx	sl
 800415a:	3001      	adds	r0, #1
 800415c:	d0ad      	beq.n	80040ba <_printf_i+0x15e>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	079b      	lsls	r3, r3, #30
 8004162:	d413      	bmi.n	800418c <_printf_i+0x230>
 8004164:	68e0      	ldr	r0, [r4, #12]
 8004166:	9b03      	ldr	r3, [sp, #12]
 8004168:	4298      	cmp	r0, r3
 800416a:	bfb8      	it	lt
 800416c:	4618      	movlt	r0, r3
 800416e:	e7a6      	b.n	80040be <_printf_i+0x162>
 8004170:	2301      	movs	r3, #1
 8004172:	4632      	mov	r2, r6
 8004174:	4649      	mov	r1, r9
 8004176:	4640      	mov	r0, r8
 8004178:	47d0      	blx	sl
 800417a:	3001      	adds	r0, #1
 800417c:	d09d      	beq.n	80040ba <_printf_i+0x15e>
 800417e:	3501      	adds	r5, #1
 8004180:	68e3      	ldr	r3, [r4, #12]
 8004182:	9903      	ldr	r1, [sp, #12]
 8004184:	1a5b      	subs	r3, r3, r1
 8004186:	42ab      	cmp	r3, r5
 8004188:	dcf2      	bgt.n	8004170 <_printf_i+0x214>
 800418a:	e7eb      	b.n	8004164 <_printf_i+0x208>
 800418c:	2500      	movs	r5, #0
 800418e:	f104 0619 	add.w	r6, r4, #25
 8004192:	e7f5      	b.n	8004180 <_printf_i+0x224>
 8004194:	08004353 	.word	0x08004353
 8004198:	08004364 	.word	0x08004364

0800419c <memmove>:
 800419c:	4288      	cmp	r0, r1
 800419e:	b510      	push	{r4, lr}
 80041a0:	eb01 0402 	add.w	r4, r1, r2
 80041a4:	d902      	bls.n	80041ac <memmove+0x10>
 80041a6:	4284      	cmp	r4, r0
 80041a8:	4623      	mov	r3, r4
 80041aa:	d807      	bhi.n	80041bc <memmove+0x20>
 80041ac:	1e43      	subs	r3, r0, #1
 80041ae:	42a1      	cmp	r1, r4
 80041b0:	d008      	beq.n	80041c4 <memmove+0x28>
 80041b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041ba:	e7f8      	b.n	80041ae <memmove+0x12>
 80041bc:	4601      	mov	r1, r0
 80041be:	4402      	add	r2, r0
 80041c0:	428a      	cmp	r2, r1
 80041c2:	d100      	bne.n	80041c6 <memmove+0x2a>
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041ce:	e7f7      	b.n	80041c0 <memmove+0x24>

080041d0 <memchr>:
 80041d0:	4603      	mov	r3, r0
 80041d2:	b510      	push	{r4, lr}
 80041d4:	b2c9      	uxtb	r1, r1
 80041d6:	4402      	add	r2, r0
 80041d8:	4293      	cmp	r3, r2
 80041da:	4618      	mov	r0, r3
 80041dc:	d101      	bne.n	80041e2 <memchr+0x12>
 80041de:	2000      	movs	r0, #0
 80041e0:	e003      	b.n	80041ea <memchr+0x1a>
 80041e2:	7804      	ldrb	r4, [r0, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	428c      	cmp	r4, r1
 80041e8:	d1f6      	bne.n	80041d8 <memchr+0x8>
 80041ea:	bd10      	pop	{r4, pc}

080041ec <memcpy>:
 80041ec:	440a      	add	r2, r1
 80041ee:	4291      	cmp	r1, r2
 80041f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80041f4:	d100      	bne.n	80041f8 <memcpy+0xc>
 80041f6:	4770      	bx	lr
 80041f8:	b510      	push	{r4, lr}
 80041fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041fe:	4291      	cmp	r1, r2
 8004200:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004204:	d1f9      	bne.n	80041fa <memcpy+0xe>
 8004206:	bd10      	pop	{r4, pc}

08004208 <_realloc_r>:
 8004208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800420c:	4680      	mov	r8, r0
 800420e:	4615      	mov	r5, r2
 8004210:	460c      	mov	r4, r1
 8004212:	b921      	cbnz	r1, 800421e <_realloc_r+0x16>
 8004214:	4611      	mov	r1, r2
 8004216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800421a:	f7ff bb9d 	b.w	8003958 <_malloc_r>
 800421e:	b92a      	cbnz	r2, 800422c <_realloc_r+0x24>
 8004220:	f7ff fc8a 	bl	8003b38 <_free_r>
 8004224:	2400      	movs	r4, #0
 8004226:	4620      	mov	r0, r4
 8004228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800422c:	f000 f81a 	bl	8004264 <_malloc_usable_size_r>
 8004230:	4285      	cmp	r5, r0
 8004232:	4606      	mov	r6, r0
 8004234:	d802      	bhi.n	800423c <_realloc_r+0x34>
 8004236:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800423a:	d8f4      	bhi.n	8004226 <_realloc_r+0x1e>
 800423c:	4629      	mov	r1, r5
 800423e:	4640      	mov	r0, r8
 8004240:	f7ff fb8a 	bl	8003958 <_malloc_r>
 8004244:	4607      	mov	r7, r0
 8004246:	2800      	cmp	r0, #0
 8004248:	d0ec      	beq.n	8004224 <_realloc_r+0x1c>
 800424a:	42b5      	cmp	r5, r6
 800424c:	462a      	mov	r2, r5
 800424e:	4621      	mov	r1, r4
 8004250:	bf28      	it	cs
 8004252:	4632      	movcs	r2, r6
 8004254:	f7ff ffca 	bl	80041ec <memcpy>
 8004258:	4621      	mov	r1, r4
 800425a:	4640      	mov	r0, r8
 800425c:	f7ff fc6c 	bl	8003b38 <_free_r>
 8004260:	463c      	mov	r4, r7
 8004262:	e7e0      	b.n	8004226 <_realloc_r+0x1e>

08004264 <_malloc_usable_size_r>:
 8004264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004268:	1f18      	subs	r0, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	bfbc      	itt	lt
 800426e:	580b      	ldrlt	r3, [r1, r0]
 8004270:	18c0      	addlt	r0, r0, r3
 8004272:	4770      	bx	lr

08004274 <_init>:
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	bf00      	nop
 8004278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427a:	bc08      	pop	{r3}
 800427c:	469e      	mov	lr, r3
 800427e:	4770      	bx	lr

08004280 <_fini>:
 8004280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004282:	bf00      	nop
 8004284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004286:	bc08      	pop	{r3}
 8004288:	469e      	mov	lr, r3
 800428a:	4770      	bx	lr
